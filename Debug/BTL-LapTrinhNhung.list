
BTL-LapTrinhNhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066fc  080066fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006704  08006704  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800670c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004098  20000074  08006780  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000410c  08006780  0002410c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d2a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e7  00000000  00000000  00030dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00034678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018017  00000000  00000000  00035618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001379d  00000000  00000000  0004d62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009600c  00000000  00000000  00060dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c0  00000000  00000000  000f6e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065ec 	.word	0x080065ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080065ec 	.word	0x080065ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000090 	.word	0x20000090
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup - DATASHEET

void lcd_send_cmd (char cmd)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	f043 030c 	orr.w	r3, r3, #12
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005f8:	f107 0208 	add.w	r2, r7, #8
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	214e      	movs	r1, #78	; 0x4e
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <lcd_send_cmd+0x5c>)
 8000606:	f001 fd31 	bl	800206c <HAL_I2C_Master_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200002e4 	.word	0x200002e4

08000618 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f023 030f 	bic.w	r3, r3, #15
 8000628:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f043 030d 	orr.w	r3, r3, #13
 8000636:	b2db      	uxtb	r3, r3
 8000638:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	f043 0309 	orr.w	r3, r3, #9
 8000640:	b2db      	uxtb	r3, r3
 8000642:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	f043 030d 	orr.w	r3, r3, #13
 800064a:	b2db      	uxtb	r3, r3
 800064c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	f043 0309 	orr.w	r3, r3, #9
 8000654:	b2db      	uxtb	r3, r3
 8000656:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000658:	f107 0208 	add.w	r2, r7, #8
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2304      	movs	r3, #4
 8000662:	214e      	movs	r1, #78	; 0x4e
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <lcd_send_data+0x5c>)
 8000666:	f001 fd01 	bl	800206c <HAL_I2C_Master_Transmit>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200002e4 	.word	0x200002e4

08000678 <lcd_clear>:

void lcd_clear (void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	f7ff ff9a 	bl	80005b8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e005      	b.n	8000696 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800068a:	2020      	movs	r0, #32
 800068c:	f7ff ffc4 	bl	8000618 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b45      	cmp	r3, #69	; 0x45
 800069a:	ddf6      	ble.n	800068a <lcd_clear+0x12>
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
    switch (row)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <lcd_put_cur+0x18>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d005      	beq.n	80006c8 <lcd_put_cur+0x22>
 80006bc:	e009      	b.n	80006d2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	603b      	str	r3, [r7, #0]
            break;
 80006c6:	e004      	b.n	80006d2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ce:	603b      	str	r3, [r7, #0]
            break;
 80006d0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff6e 	bl	80005b8 <lcd_send_cmd>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <lcd_init>:


void lcd_init (void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f001 f8bb 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ee:	2030      	movs	r0, #48	; 0x30
 80006f0:	f7ff ff62 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006f4:	2005      	movs	r0, #5
 80006f6:	f001 f8b5 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006fa:	2030      	movs	r0, #48	; 0x30
 80006fc:	f7ff ff5c 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000700:	2001      	movs	r0, #1
 8000702:	f001 f8af 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000706:	2030      	movs	r0, #48	; 0x30
 8000708:	f7ff ff56 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(10);
 800070c:	200a      	movs	r0, #10
 800070e:	f001 f8a9 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000712:	2020      	movs	r0, #32
 8000714:	f7ff ff50 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f001 f8a3 	bl	8001864 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800071e:	2028      	movs	r0, #40	; 0x28
 8000720:	f7ff ff4a 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 f89d 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800072a:	2008      	movs	r0, #8
 800072c:	f7ff ff44 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f001 f897 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ff3e 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f001 f891 	bl	8001864 <HAL_Delay>
	HAL_Delay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f001 f88e 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000748:	2006      	movs	r0, #6
 800074a:	f7ff ff35 	bl	80005b8 <lcd_send_cmd>
	HAL_Delay(1);
 800074e:	2001      	movs	r0, #1
 8000750:	f001 f888 	bl	8001864 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000754:	200c      	movs	r0, #12
 8000756:	f7ff ff2f 	bl	80005b8 <lcd_send_cmd>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000766:	e006      	b.n	8000776 <lcd_send_string+0x18>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff51 	bl	8000618 <lcd_send_data>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1f4      	bne.n	8000768 <lcd_send_string+0xa>
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f000 fff7 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f8b7 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fa0f 	bl	8000bb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800079a:	f000 f91b 	bl	80009d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800079e:	f000 f947 	bl	8000a30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80007a2:	f7ff ff9f 	bl	80006e4 <lcd_init>
	lcd_put_cur(0,1);
 80007a6:	2101      	movs	r1, #1
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ff7c 	bl	80006a6 <lcd_put_cur>
  lcd_send_string("Hello Everyone");
 80007ae:	4844      	ldr	r0, [pc, #272]	; (80008c0 <main+0x138>)
 80007b0:	f7ff ffd5 	bl	800075e <lcd_send_string>
  HAL_Delay(2000);
 80007b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b8:	f001 f854 	bl	8001864 <HAL_Delay>
  lcd_clear ();
 80007bc:	f7ff ff5c 	bl	8000678 <lcd_clear>
	lcd_put_cur(0,5);
 80007c0:	2105      	movs	r1, #5
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ff6f 	bl	80006a6 <lcd_put_cur>
  lcd_send_string("DH-BK");
 80007c8:	483e      	ldr	r0, [pc, #248]	; (80008c4 <main+0x13c>)
 80007ca:	f7ff ffc8 	bl	800075e <lcd_send_string>
	lcd_put_cur(1,2);
 80007ce:	2102      	movs	r1, #2
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff68 	bl	80006a6 <lcd_put_cur>
lcd_send_string("Demo - Nhom 4");
 80007d6:	483c      	ldr	r0, [pc, #240]	; (80008c8 <main+0x140>)
 80007d8:	f7ff ffc1 	bl	800075e <lcd_send_string>
  HAL_Delay(2000);
 80007dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e0:	f001 f840 	bl	8001864 <HAL_Delay>
  lcd_clear ();
 80007e4:	f7ff ff48 	bl	8000678 <lcd_clear>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	4838      	ldr	r0, [pc, #224]	; (80008cc <main+0x144>)
 80007ec:	f002 fc32 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80007f0:	2104      	movs	r1, #4
 80007f2:	4836      	ldr	r0, [pc, #216]	; (80008cc <main+0x144>)
 80007f4:	f002 fc2e 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80007f8:	2108      	movs	r1, #8
 80007fa:	4834      	ldr	r0, [pc, #208]	; (80008cc <main+0x144>)
 80007fc:	f002 fc2a 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000800:	210c      	movs	r1, #12
 8000802:	4832      	ldr	r0, [pc, #200]	; (80008cc <main+0x144>)
 8000804:	f002 fc26 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2120      	movs	r1, #32
 800080c:	4830      	ldr	r0, [pc, #192]	; (80008d0 <main+0x148>)
 800080e:	f001 facf 	bl	8001db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <main+0x148>)
 8000818:	f001 faca 	bl	8001db0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0);
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <main+0x144>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0);
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <main+0x144>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	63da      	str	r2, [r3, #60]	; 0x3c
  xTaskCreate(taskreadbutton,"readbutton", 256, NULL, 0, NULL );
 800082c:	2300      	movs	r3, #0
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2300      	movs	r3, #0
 8000836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800083a:	4926      	ldr	r1, [pc, #152]	; (80008d4 <main+0x14c>)
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <main+0x150>)
 800083e:	f003 feae 	bl	800459e <xTaskCreate>
  xTaskCreate(off_moto1,"Led1", 128, NULL, 0, NULL );
 8000842:	2300      	movs	r3, #0
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	2300      	movs	r3, #0
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	4923      	ldr	r1, [pc, #140]	; (80008dc <main+0x154>)
 8000850:	4823      	ldr	r0, [pc, #140]	; (80008e0 <main+0x158>)
 8000852:	f003 fea4 	bl	800459e <xTaskCreate>
  xTaskCreate(tang_moto1,"Led2", 128, NULL, 0, NULL );
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	2300      	movs	r3, #0
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	4920      	ldr	r1, [pc, #128]	; (80008e4 <main+0x15c>)
 8000864:	4820      	ldr	r0, [pc, #128]	; (80008e8 <main+0x160>)
 8000866:	f003 fe9a 	bl	800459e <xTaskCreate>
  xTaskCreate(giam_moto1,"Led2", 128, NULL, 0, NULL );
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2300      	movs	r3, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	491b      	ldr	r1, [pc, #108]	; (80008e4 <main+0x15c>)
 8000878:	481c      	ldr	r0, [pc, #112]	; (80008ec <main+0x164>)
 800087a:	f003 fe90 	bl	800459e <xTaskCreate>
  xTaskCreate(off_moto2,"Led3", 128, NULL, 0, NULL );
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	4919      	ldr	r1, [pc, #100]	; (80008f0 <main+0x168>)
 800088c:	4819      	ldr	r0, [pc, #100]	; (80008f4 <main+0x16c>)
 800088e:	f003 fe86 	bl	800459e <xTaskCreate>
  xTaskCreate(tang_moto2,"Led4", 128, NULL, 0, NULL );
 8000892:	2300      	movs	r3, #0
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	4916      	ldr	r1, [pc, #88]	; (80008f8 <main+0x170>)
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <main+0x174>)
 80008a2:	f003 fe7c 	bl	800459e <xTaskCreate>
  xTaskCreate(giam_moto2,"Led4", 128, NULL, 0, NULL );
 80008a6:	2300      	movs	r3, #0
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	4911      	ldr	r1, [pc, #68]	; (80008f8 <main+0x170>)
 80008b4:	4812      	ldr	r0, [pc, #72]	; (8000900 <main+0x178>)
 80008b6:	f003 fe72 	bl	800459e <xTaskCreate>
  vTaskStartScheduler();
 80008ba:	f003 ffdb 	bl	8004874 <vTaskStartScheduler>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008be:	e7fe      	b.n	80008be <main+0x136>
 80008c0:	08006604 	.word	0x08006604
 80008c4:	08006614 	.word	0x08006614
 80008c8:	0800661c 	.word	0x0800661c
 80008cc:	20000338 	.word	0x20000338
 80008d0:	40020000 	.word	0x40020000
 80008d4:	0800662c 	.word	0x0800662c
 80008d8:	08000ef5 	.word	0x08000ef5
 80008dc:	08006638 	.word	0x08006638
 80008e0:	08001111 	.word	0x08001111
 80008e4:	08006640 	.word	0x08006640
 80008e8:	08001181 	.word	0x08001181
 80008ec:	08001219 	.word	0x08001219
 80008f0:	08006648 	.word	0x08006648
 80008f4:	080012d9 	.word	0x080012d9
 80008f8:	08006650 	.word	0x08006650
 80008fc:	08001349 	.word	0x08001349
 8000900:	080013e1 	.word	0x080013e1

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 fa02 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <SystemClock_Config+0xc8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <SystemClock_Config+0xc8>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <SystemClock_Config+0xc8>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <SystemClock_Config+0xcc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <SystemClock_Config+0xcc>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <SystemClock_Config+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fe77 	bl	800267c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000994:	f000 fd88 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2103      	movs	r1, #3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f8d9 	bl	8002b6c <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c0:	f000 fd72 	bl	80014a8 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3750      	adds	r7, #80	; 0x50
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_I2C1_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_I2C1_Init+0x58>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_I2C1_Init+0x50>)
 8000a12:	f001 f9e7 	bl	8001de4 <HAL_I2C_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 fd44 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200002e4 	.word	0x200002e4
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	000186a0 	.word	0x000186a0

08000a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b096      	sub	sp, #88	; 0x58
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2220      	movs	r2, #32
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f005 f957 	bl	8005d1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6e:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a70:	4a50      	ldr	r2, [pc, #320]	; (8000bb4 <MX_TIM1_Init+0x184>)
 8000a72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5000;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000a82:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a84:	2263      	movs	r2, #99	; 0x63
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b49      	ldr	r3, [pc, #292]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8e:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a9a:	4845      	ldr	r0, [pc, #276]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000a9c:	f002 fa32 	bl	8002f04 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aa6:	f000 fcff 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	483e      	ldr	r0, [pc, #248]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000ab8:	f002 fc3e 	bl	8003338 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ac2:	f000 fcf1 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac6:	483a      	ldr	r0, [pc, #232]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000ac8:	f002 fa6b 	bl	8002fa2 <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ad2:	f000 fce9 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4832      	ldr	r0, [pc, #200]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000ae6:	f002 ffbb 	bl	8003a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000af0:	f000 fcda 	bl	80014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000b1a:	f002 fb4b 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b24:	f000 fcc0 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000b32:	f002 fb3f 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b3c:	f000 fcb4 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2208      	movs	r2, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000b4a:	f002 fb33 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b54:	f000 fca8 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000b62:	f002 fb27 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b6c:	f000 fc9c 	bl	80014a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000b94:	f002 ffd2 	bl	8003b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b9e:	f000 fc83 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM1_Init+0x180>)
 8000ba4:	f000 fd1c 	bl	80015e0 <HAL_TIM_MspPostInit>

}
 8000ba8:	bf00      	nop
 8000baa:	3758      	adds	r7, #88	; 0x58
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000338 	.word	0x20000338
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a34      	ldr	r2, [pc, #208]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_GPIO_Init+0x160>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	21a0      	movs	r1, #160	; 0xa0
 8000c7a:	4828      	ldr	r0, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x164>)
 8000c7c:	f001 f898 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	21aa      	movs	r1, #170	; 0xaa
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000c86:	f001 f893 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481e      	ldr	r0, [pc, #120]	; (8000d1c <MX_GPIO_Init+0x164>)
 8000ca2:	f000 fee9 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ca6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481a      	ldr	r0, [pc, #104]	; (8000d24 <MX_GPIO_Init+0x16c>)
 8000cbc:	f000 fedc 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000cc0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000cd6:	f000 fecf 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <MX_GPIO_Init+0x170>)
 8000cee:	f000 fec3 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD3 PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000cf2:	23aa      	movs	r3, #170	; 0xaa
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_GPIO_Init+0x168>)
 8000d0a:	f000 feb5 	bl	8001a78 <HAL_GPIO_Init>

}
 8000d0e:	bf00      	nop
 8000d10:	3730      	adds	r7, #48	; 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020800 	.word	0x40020800

08000d2c <nhannut1>:

/* USER CODE BEGIN 4 */
int nhannut1(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==1) {
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <nhannut1+0x48>)
 8000d36:	f001 f823 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d115      	bne.n	8000d6c <nhannut1+0x40>
      HAL_Delay(20);        //delay chong rung phim
 8000d40:	2014      	movs	r0, #20
 8000d42:	f000 fd8f 	bl	8001864 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==1){
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	480a      	ldr	r0, [pc, #40]	; (8000d74 <nhannut1+0x48>)
 8000d4c:	f001 f818 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10a      	bne.n	8000d6c <nhannut1+0x40>
        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==1);//cho phim nha
 8000d56:	bf00      	nop
 8000d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <nhannut1+0x48>)
 8000d5e:	f001 f80f 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d0f7      	beq.n	8000d58 <nhannut1+0x2c>
        return 1;//nut START
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <nhannut1+0x42>
        }
     }
     return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020400 	.word	0x40020400

08000d78 <nhannut2>:
int nhannut2(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==1) {
 8000d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d80:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <nhannut2+0x48>)
 8000d82:	f000 fffd 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d115      	bne.n	8000db8 <nhannut2+0x40>
	      HAL_Delay(20);        //delay chong rung phim
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 fd69 	bl	8001864 <HAL_Delay>
	      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==1){
 8000d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <nhannut2+0x48>)
 8000d98:	f000 fff2 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10a      	bne.n	8000db8 <nhannut2+0x40>
	        while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==1);//cho phim nha
 8000da2:	bf00      	nop
 8000da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <nhannut2+0x48>)
 8000daa:	f000 ffe9 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d0f7      	beq.n	8000da4 <nhannut2+0x2c>
	        return 1;//nut START
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <nhannut2+0x42>
        }
     }
     return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <nhannut3>:
int nhannut3(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1) {
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <nhannut3+0x48>)
 8000dce:	f000 ffd7 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d115      	bne.n	8000e04 <nhannut3+0x40>
      HAL_Delay(20);        //delay chong rung phim
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f000 fd43 	bl	8001864 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1){
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <nhannut3+0x48>)
 8000de4:	f000 ffcc 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10a      	bne.n	8000e04 <nhannut3+0x40>
        while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);//cho phim nha
 8000dee:	bf00      	nop
 8000df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <nhannut3+0x48>)
 8000df6:	f000 ffc3 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d0f7      	beq.n	8000df0 <nhannut3+0x2c>
        return 1;//nut START
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <nhannut3+0x42>
        }
     }
     return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <nhannut4>:
int nhannut4(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)==1) {
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	480f      	ldr	r0, [pc, #60]	; (8000e58 <nhannut4+0x48>)
 8000e1a:	f000 ffb1 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d115      	bne.n	8000e50 <nhannut4+0x40>
      HAL_Delay(20);        //delay chong rung phim
 8000e24:	2014      	movs	r0, #20
 8000e26:	f000 fd1d 	bl	8001864 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)==1){
 8000e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <nhannut4+0x48>)
 8000e30:	f000 ffa6 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10a      	bne.n	8000e50 <nhannut4+0x40>
        while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)==1);//cho phim nha
 8000e3a:	bf00      	nop
 8000e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <nhannut4+0x48>)
 8000e42:	f000 ff9d 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d0f7      	beq.n	8000e3c <nhannut4+0x2c>
        return 1;//nut START
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <nhannut4+0x42>
        }
     }
     return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020c00 	.word	0x40020c00

08000e5c <nhannut5>:
int nhannut5(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)==1) {
 8000e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <nhannut5+0x48>)
 8000e66:	f000 ff8b 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d115      	bne.n	8000e9c <nhannut5+0x40>
      HAL_Delay(20);        //delay chong rung phim
 8000e70:	2014      	movs	r0, #20
 8000e72:	f000 fcf7 	bl	8001864 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)==1){
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <nhannut5+0x48>)
 8000e7c:	f000 ff80 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10a      	bne.n	8000e9c <nhannut5+0x40>
        while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)==1);//cho phim nha
 8000e86:	bf00      	nop
 8000e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <nhannut5+0x48>)
 8000e8e:	f000 ff77 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d0f7      	beq.n	8000e88 <nhannut5+0x2c>
        return 1;//nut START
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <nhannut5+0x42>
        }
     }
     return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <nhannut6>:
int nhannut6(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)==1) {
 8000eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <nhannut6+0x48>)
 8000eb2:	f000 ff65 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d115      	bne.n	8000ee8 <nhannut6+0x40>
      HAL_Delay(20);        //delay chong rung phim
 8000ebc:	2014      	movs	r0, #20
 8000ebe:	f000 fcd1 	bl	8001864 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)==1){
 8000ec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <nhannut6+0x48>)
 8000ec8:	f000 ff5a 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10a      	bne.n	8000ee8 <nhannut6+0x40>
        while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)==1);//cho phim nha
 8000ed2:	bf00      	nop
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <nhannut6+0x48>)
 8000eda:	f000 ff51 	bl	8001d80 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d0f7      	beq.n	8000ed4 <nhannut6+0x2c>
        return 1;//nut START
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <nhannut6+0x42>
        }
     }
     return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020c00 	.word	0x40020c00

08000ef4 <taskreadbutton>:
static void taskreadbutton(void *pvParameters)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
const unsigned char Frequency = 40; //20ms
 8000efc:	2328      	movs	r3, #40	; 0x28
 8000efe:	73fb      	strb	r3, [r7, #15]
vSemaphoreCreateBinary(xButton1Semphore);
 8000f00:	2203      	movs	r2, #3
 8000f02:	2100      	movs	r1, #0
 8000f04:	2001      	movs	r0, #1
 8000f06:	f002 ff87 	bl	8003e18 <xQueueGenericCreate>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <taskreadbutton+0x204>)
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b79      	ldr	r3, [pc, #484]	; (80010f8 <taskreadbutton+0x204>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <taskreadbutton+0x32>
 8000f18:	4b77      	ldr	r3, [pc, #476]	; (80010f8 <taskreadbutton+0x204>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	f002 ffd3 	bl	8003ecc <xQueueGenericSend>
if(xButton1Semphore!= NULL)
 8000f26:	4b74      	ldr	r3, [pc, #464]	; (80010f8 <taskreadbutton+0x204>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <taskreadbutton+0x46>
{
 xSemaphoreTake(xButton1Semphore,(portTickType)1);
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <taskreadbutton+0x204>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2101      	movs	r1, #1
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f8c7 	bl	80040c8 <xQueueSemaphoreTake>
}
vSemaphoreCreateBinary(xButton2Semphore);
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f002 ff6a 	bl	8003e18 <xQueueGenericCreate>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a6d      	ldr	r2, [pc, #436]	; (80010fc <taskreadbutton+0x208>)
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <taskreadbutton+0x208>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <taskreadbutton+0x6c>
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <taskreadbutton+0x208>)
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f002 ffb6 	bl	8003ecc <xQueueGenericSend>
if(xButton2Semphore!= NULL)
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <taskreadbutton+0x208>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <taskreadbutton+0x80>
{
 xSemaphoreTake(xButton2Semphore,(portTickType)1);
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <taskreadbutton+0x208>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 f8aa 	bl	80040c8 <xQueueSemaphoreTake>
}
vSemaphoreCreateBinary(xButton3Semphore);
 8000f74:	2203      	movs	r2, #3
 8000f76:	2100      	movs	r1, #0
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f002 ff4d 	bl	8003e18 <xQueueGenericCreate>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <taskreadbutton+0x20c>)
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <taskreadbutton+0x20c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <taskreadbutton+0xa6>
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <taskreadbutton+0x20c>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	f002 ff99 	bl	8003ecc <xQueueGenericSend>
if(xButton3Semphore!= NULL)
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <taskreadbutton+0x20c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <taskreadbutton+0xba>
{
 xSemaphoreTake(xButton3Semphore,(portTickType)1);
 8000fa2:	4b57      	ldr	r3, [pc, #348]	; (8001100 <taskreadbutton+0x20c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f88d 	bl	80040c8 <xQueueSemaphoreTake>
}

vSemaphoreCreateBinary(xButton4Semphore);
 8000fae:	2203      	movs	r2, #3
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f002 ff30 	bl	8003e18 <xQueueGenericCreate>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a52      	ldr	r2, [pc, #328]	; (8001104 <taskreadbutton+0x210>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <taskreadbutton+0x210>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <taskreadbutton+0xe0>
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <taskreadbutton+0x210>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f002 ff7c 	bl	8003ecc <xQueueGenericSend>
if(xButton4Semphore!= NULL)
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <taskreadbutton+0x210>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <taskreadbutton+0xf4>
{
 xSemaphoreTake(xButton4Semphore,(portTickType)1);
 8000fdc:	4b49      	ldr	r3, [pc, #292]	; (8001104 <taskreadbutton+0x210>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 f870 	bl	80040c8 <xQueueSemaphoreTake>
}

vSemaphoreCreateBinary(xButton5Semphore);
 8000fe8:	2203      	movs	r2, #3
 8000fea:	2100      	movs	r1, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f002 ff13 	bl	8003e18 <xQueueGenericCreate>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a44      	ldr	r2, [pc, #272]	; (8001108 <taskreadbutton+0x214>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <taskreadbutton+0x214>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <taskreadbutton+0x11a>
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <taskreadbutton+0x214>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	2300      	movs	r3, #0
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	f002 ff5f 	bl	8003ecc <xQueueGenericSend>
if(xButton5Semphore!= NULL)
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <taskreadbutton+0x214>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <taskreadbutton+0x12e>
{
 xSemaphoreTake(xButton5Semphore,(portTickType)1);
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <taskreadbutton+0x214>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f003 f853 	bl	80040c8 <xQueueSemaphoreTake>
}

vSemaphoreCreateBinary(xButton6Semphore);
 8001022:	2203      	movs	r2, #3
 8001024:	2100      	movs	r1, #0
 8001026:	2001      	movs	r0, #1
 8001028:	f002 fef6 	bl	8003e18 <xQueueGenericCreate>
 800102c:	4603      	mov	r3, r0
 800102e:	4a37      	ldr	r2, [pc, #220]	; (800110c <taskreadbutton+0x218>)
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <taskreadbutton+0x218>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <taskreadbutton+0x154>
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <taskreadbutton+0x218>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	f002 ff42 	bl	8003ecc <xQueueGenericSend>
if(xButton6Semphore!= NULL)
 8001048:	4b30      	ldr	r3, [pc, #192]	; (800110c <taskreadbutton+0x218>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <taskreadbutton+0x168>
{
 xSemaphoreTake(xButton6Semphore,(portTickType)1);
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <taskreadbutton+0x218>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f836 	bl	80040c8 <xQueueSemaphoreTake>
}
while(1)
{
	if(nhannut1()==1){
 800105c:	f7ff fe66 	bl	8000d2c <nhannut1>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d106      	bne.n	8001074 <taskreadbutton+0x180>
		xSemaphoreGive(xButton1Semphore);
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <taskreadbutton+0x204>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	f002 ff2c 	bl	8003ecc <xQueueGenericSend>
	}
	if(nhannut2()==1){
 8001074:	f7ff fe80 	bl	8000d78 <nhannut2>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d106      	bne.n	800108c <taskreadbutton+0x198>
		xSemaphoreGive(xButton2Semphore);
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <taskreadbutton+0x208>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	f002 ff20 	bl	8003ecc <xQueueGenericSend>
	}
	if(nhannut3()==1){
 800108c:	f7ff fe9a 	bl	8000dc4 <nhannut3>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d106      	bne.n	80010a4 <taskreadbutton+0x1b0>
		xSemaphoreGive(xButton3Semphore);
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <taskreadbutton+0x20c>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	f002 ff14 	bl	8003ecc <xQueueGenericSend>
	}
	if(nhannut4()==1){
 80010a4:	f7ff feb4 	bl	8000e10 <nhannut4>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d106      	bne.n	80010bc <taskreadbutton+0x1c8>
		xSemaphoreGive(xButton4Semphore);
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <taskreadbutton+0x210>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	f002 ff08 	bl	8003ecc <xQueueGenericSend>
	}
	if(nhannut5()==1){
 80010bc:	f7ff fece 	bl	8000e5c <nhannut5>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d106      	bne.n	80010d4 <taskreadbutton+0x1e0>
		xSemaphoreGive(xButton5Semphore);
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <taskreadbutton+0x214>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	f002 fefc 	bl	8003ecc <xQueueGenericSend>
	}
	if(nhannut6()==1){
 80010d4:	f7ff fee8 	bl	8000ea8 <nhannut6>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d106      	bne.n	80010ec <taskreadbutton+0x1f8>
		xSemaphoreGive(xButton6Semphore);
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <taskreadbutton+0x218>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	f002 fef0 	bl	8003ecc <xQueueGenericSend>
	}
 vTaskDelay(Frequency);
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fb8c 	bl	800480c <vTaskDelay>
	if(nhannut1()==1){
 80010f4:	e7b2      	b.n	800105c <taskreadbutton+0x168>
 80010f6:	bf00      	nop
 80010f8:	20000380 	.word	0x20000380
 80010fc:	20000384 	.word	0x20000384
 8001100:	20000388 	.word	0x20000388
 8001104:	2000038c 	.word	0x2000038c
 8001108:	20000390 	.word	0x20000390
 800110c:	20000394 	.word	0x20000394

08001110 <off_moto1>:
 }
}
static void off_moto1(void *pvParameters){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
while(1){
		if(xButton2Semphore != NULL){
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <off_moto1+0x5c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <off_moto1+0x52>
		if(xSemaphoreTake(xButton2Semphore,((portTickType)1)==pdTRUE)){
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <off_moto1+0x5c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f002 ffce 	bl	80040c8 <xQueueSemaphoreTake>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d017      	beq.n	8001162 <off_moto1+0x52>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8001132:	2200      	movs	r2, #0
 8001134:	2102      	movs	r1, #2
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <off_moto1+0x60>)
 8001138:	f000 fe3a 	bl	8001db0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 800113c:	2201      	movs	r2, #1
 800113e:	2108      	movs	r1, #8
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <off_moto1+0x60>)
 8001142:	f000 fe35 	bl	8001db0 <HAL_GPIO_WritePin>
			duty1 =0;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <off_moto1+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
			lcd_put_cur(0,0);
 800114c:	2100      	movs	r1, #0
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff faa9 	bl	80006a6 <lcd_put_cur>
			lcd_send_string("moto1 : dang off");
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <off_moto1+0x68>)
 8001156:	f7ff fb02 	bl	800075e <lcd_send_string>
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <off_moto1+0x6c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		vTaskDelay(20);
 8001162:	2014      	movs	r0, #20
 8001164:	f003 fb52 	bl	800480c <vTaskDelay>
		if(xButton2Semphore != NULL){
 8001168:	e7d6      	b.n	8001118 <off_moto1+0x8>
 800116a:	bf00      	nop
 800116c:	20000384 	.word	0x20000384
 8001170:	40020c00 	.word	0x40020c00
 8001174:	20000398 	.word	0x20000398
 8001178:	08006658 	.word	0x08006658
 800117c:	20000338 	.word	0x20000338

08001180 <tang_moto1>:
	}
}
static void tang_moto1(void *pvParameters){
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	char buffer[20];
while(1){
		if(xButton1Semphore != NULL){
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <tang_moto1+0x84>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d034      	beq.n	80011fa <tang_moto1+0x7a>
			if(xSemaphoreTake(xButton1Semphore,((portTickType)1)==pdTRUE)){
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <tang_moto1+0x84>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ff96 	bl	80040c8 <xQueueSemaphoreTake>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d02b      	beq.n	80011fa <tang_moto1+0x7a>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2102      	movs	r1, #2
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <tang_moto1+0x88>)
 80011a8:	f000 fe02 	bl	8001db0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2108      	movs	r1, #8
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <tang_moto1+0x88>)
 80011b2:	f000 fdfd 	bl	8001db0 <HAL_GPIO_WritePin>
			duty1 += 33;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <tang_moto1+0x8c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3321      	adds	r3, #33	; 0x21
 80011bc:	4a13      	ldr	r2, [pc, #76]	; (800120c <tang_moto1+0x8c>)
 80011be:	6013      	str	r3, [r2, #0]
//			lcd_clear();
			lcd_put_cur(0,0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fa6f 	bl	80006a6 <lcd_put_cur>
			if (duty1>99) duty1=99;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <tang_moto1+0x8c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b63      	cmp	r3, #99	; 0x63
 80011ce:	dd02      	ble.n	80011d6 <tang_moto1+0x56>
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <tang_moto1+0x8c>)
 80011d2:	2263      	movs	r2, #99	; 0x63
 80011d4:	601a      	str	r2, [r3, #0]
			sprintf(buffer,"speed moto1: %d%%",duty1);
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <tang_moto1+0x8c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <tang_moto1+0x90>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fda3 	bl	8005d2c <siprintf>
			lcd_send_string(buffer);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fab7 	bl	800075e <lcd_send_string>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,duty1);
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <tang_moto1+0x8c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <tang_moto1+0x94>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		vTaskDelay(20);
 80011fa:	2014      	movs	r0, #20
 80011fc:	f003 fb06 	bl	800480c <vTaskDelay>
		if(xButton1Semphore != NULL){
 8001200:	e7c2      	b.n	8001188 <tang_moto1+0x8>
 8001202:	bf00      	nop
 8001204:	20000380 	.word	0x20000380
 8001208:	40020c00 	.word	0x40020c00
 800120c:	20000398 	.word	0x20000398
 8001210:	0800666c 	.word	0x0800666c
 8001214:	20000338 	.word	0x20000338

08001218 <giam_moto1>:
	}
}
static void giam_moto1(void *pvParameters){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	char buffer[20];
while(1){
		if(xButton3Semphore != NULL){
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <giam_moto1+0xa8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d047      	beq.n	80012b8 <giam_moto1+0xa0>
			if(xSemaphoreTake(xButton3Semphore,((portTickType)1)==pdTRUE)){
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <giam_moto1+0xa8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f002 ff4a 	bl	80040c8 <xQueueSemaphoreTake>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03e      	beq.n	80012b8 <giam_moto1+0xa0>
			duty1 -= 33;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <giam_moto1+0xac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b21      	subs	r3, #33	; 0x21
 8001240:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <giam_moto1+0xac>)
 8001242:	6013      	str	r3, [r2, #0]
			lcd_put_cur(0,0);
 8001244:	2100      	movs	r1, #0
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fa2d 	bl	80006a6 <lcd_put_cur>
			if (duty1<=0)
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <giam_moto1+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc15      	bgt.n	8001280 <giam_moto1+0x68>
			{	duty1=0;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <giam_moto1+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	481a      	ldr	r0, [pc, #104]	; (80012c8 <giam_moto1+0xb0>)
 8001260:	f000 fda6 	bl	8001db0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 8001264:	2201      	movs	r2, #1
 8001266:	2108      	movs	r1, #8
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <giam_moto1+0xb0>)
 800126a:	f000 fda1 	bl	8001db0 <HAL_GPIO_WritePin>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,duty1);
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <giam_moto1+0xac>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <giam_moto1+0xb4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	635a      	str	r2, [r3, #52]	; 0x34
				lcd_send_string("moto1 : dang off");
 8001278:	4815      	ldr	r0, [pc, #84]	; (80012d0 <giam_moto1+0xb8>)
 800127a:	f7ff fa70 	bl	800075e <lcd_send_string>
 800127e:	e01b      	b.n	80012b8 <giam_moto1+0xa0>
			}
			else
			{
				sprintf(buffer,"speed moto1: %d%%",duty1);
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <giam_moto1+0xac>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4912      	ldr	r1, [pc, #72]	; (80012d4 <giam_moto1+0xbc>)
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fd4e 	bl	8005d2c <siprintf>
				lcd_send_string(buffer);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fa62 	bl	800075e <lcd_send_string>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,duty1);
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <giam_moto1+0xac>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <giam_moto1+0xb4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <giam_moto1+0xb0>)
 80012aa:	f000 fd81 	bl	8001db0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2108      	movs	r1, #8
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <giam_moto1+0xb0>)
 80012b4:	f000 fd7c 	bl	8001db0 <HAL_GPIO_WritePin>
			}
			}
		}
		vTaskDelay(20);
 80012b8:	2014      	movs	r0, #20
 80012ba:	f003 faa7 	bl	800480c <vTaskDelay>
		if(xButton3Semphore != NULL){
 80012be:	e7af      	b.n	8001220 <giam_moto1+0x8>
 80012c0:	20000388 	.word	0x20000388
 80012c4:	20000398 	.word	0x20000398
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	20000338 	.word	0x20000338
 80012d0:	08006658 	.word	0x08006658
 80012d4:	0800666c 	.word	0x0800666c

080012d8 <off_moto2>:
	}
}
static void off_moto2(void *pvParameters){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
while(1){
		if(xButton5Semphore != NULL){
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <off_moto2+0x5c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <off_moto2+0x52>
		if(xSemaphoreTake(xButton5Semphore,((portTickType)1)==pdTRUE)){
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <off_moto2+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 feea 	bl	80040c8 <xQueueSemaphoreTake>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d017      	beq.n	800132a <off_moto2+0x52>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <off_moto2+0x60>)
 8001300:	f000 fd56 	bl	8001db0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <off_moto2+0x60>)
 800130a:	f000 fd51 	bl	8001db0 <HAL_GPIO_WritePin>
			duty2 =0;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <off_moto2+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
			lcd_put_cur(1,0);
 8001314:	2100      	movs	r1, #0
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff f9c5 	bl	80006a6 <lcd_put_cur>
			lcd_send_string("moto2 : dang off");
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <off_moto2+0x68>)
 800131e:	f7ff fa1e 	bl	800075e <lcd_send_string>
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0);
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <off_moto2+0x6c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		vTaskDelay(20);
 800132a:	2014      	movs	r0, #20
 800132c:	f003 fa6e 	bl	800480c <vTaskDelay>
		if(xButton5Semphore != NULL){
 8001330:	e7d6      	b.n	80012e0 <off_moto2+0x8>
 8001332:	bf00      	nop
 8001334:	20000390 	.word	0x20000390
 8001338:	40020c00 	.word	0x40020c00
 800133c:	2000039c 	.word	0x2000039c
 8001340:	08006680 	.word	0x08006680
 8001344:	20000338 	.word	0x20000338

08001348 <tang_moto2>:
	}
}
static void tang_moto2(void *pvParameters){
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

	char buffer[20];
while(1){
		if(xButton4Semphore != NULL){
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <tang_moto2+0x84>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d034      	beq.n	80013c2 <tang_moto2+0x7a>
			if(xSemaphoreTake(xButton4Semphore,((portTickType)1)==pdTRUE)){
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <tang_moto2+0x84>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f002 feb2 	bl	80040c8 <xQueueSemaphoreTake>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02b      	beq.n	80013c2 <tang_moto2+0x7a>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,1);
 800136a:	2201      	movs	r2, #1
 800136c:	2120      	movs	r1, #32
 800136e:	4818      	ldr	r0, [pc, #96]	; (80013d0 <tang_moto2+0x88>)
 8001370:	f000 fd1e 	bl	8001db0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,0);
 8001374:	2200      	movs	r2, #0
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4815      	ldr	r0, [pc, #84]	; (80013d0 <tang_moto2+0x88>)
 800137a:	f000 fd19 	bl	8001db0 <HAL_GPIO_WritePin>
			duty2 += 33;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <tang_moto2+0x8c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	3321      	adds	r3, #33	; 0x21
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <tang_moto2+0x8c>)
 8001386:	6013      	str	r3, [r2, #0]
			lcd_put_cur(1,0);
 8001388:	2100      	movs	r1, #0
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff f98b 	bl	80006a6 <lcd_put_cur>
			if (duty2>99) duty2=99;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <tang_moto2+0x8c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b63      	cmp	r3, #99	; 0x63
 8001396:	dd02      	ble.n	800139e <tang_moto2+0x56>
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <tang_moto2+0x8c>)
 800139a:	2263      	movs	r2, #99	; 0x63
 800139c:	601a      	str	r2, [r3, #0]
			sprintf(buffer,"speed moto2: %d%%",duty2);
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <tang_moto2+0x8c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <tang_moto2+0x90>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 fcbf 	bl	8005d2c <siprintf>
			lcd_send_string(buffer);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f9d3 	bl	800075e <lcd_send_string>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,duty2);
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <tang_moto2+0x8c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <tang_moto2+0x94>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		vTaskDelay(20);
 80013c2:	2014      	movs	r0, #20
 80013c4:	f003 fa22 	bl	800480c <vTaskDelay>
		if(xButton4Semphore != NULL){
 80013c8:	e7c2      	b.n	8001350 <tang_moto2+0x8>
 80013ca:	bf00      	nop
 80013cc:	2000038c 	.word	0x2000038c
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	2000039c 	.word	0x2000039c
 80013d8:	08006694 	.word	0x08006694
 80013dc:	20000338 	.word	0x20000338

080013e0 <giam_moto2>:
	}
}
static void giam_moto2(void *pvParameters){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	char buffer[20];
while(1){
		if(xButton6Semphore != NULL){
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <giam_moto2+0xb0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d04b      	beq.n	8001488 <giam_moto2+0xa8>
			if(xSemaphoreTake(xButton6Semphore,((portTickType)1)==pdTRUE)){
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <giam_moto2+0xb0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fe66 	bl	80040c8 <xQueueSemaphoreTake>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d042      	beq.n	8001488 <giam_moto2+0xa8>

			duty2 -= 33;
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <giam_moto2+0xb4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3b21      	subs	r3, #33	; 0x21
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <giam_moto2+0xb4>)
 800140a:	6013      	str	r3, [r2, #0]
			lcd_put_cur(1,0);
 800140c:	2100      	movs	r1, #0
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff f949 	bl	80006a6 <lcd_put_cur>
			if (duty2<=0)
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <giam_moto2+0xb4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dc15      	bgt.n	8001448 <giam_moto2+0x68>
			{	duty2=0;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <giam_moto2+0xb4>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,1);
 8001422:	2201      	movs	r2, #1
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	481c      	ldr	r0, [pc, #112]	; (8001498 <giam_moto2+0xb8>)
 8001428:	f000 fcc2 	bl	8001db0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	4819      	ldr	r0, [pc, #100]	; (8001498 <giam_moto2+0xb8>)
 8001432:	f000 fcbd 	bl	8001db0 <HAL_GPIO_WritePin>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,duty2);
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <giam_moto2+0xb4>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <giam_moto2+0xbc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
				lcd_send_string("moto2 : dang off");
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <giam_moto2+0xc0>)
 8001442:	f7ff f98c 	bl	800075e <lcd_send_string>
 8001446:	e01f      	b.n	8001488 <giam_moto2+0xa8>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,1);
 8001448:	2201      	movs	r2, #1
 800144a:	2120      	movs	r1, #32
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <giam_moto2+0xb8>)
 800144e:	f000 fcaf 	bl	8001db0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,0);
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	4810      	ldr	r0, [pc, #64]	; (8001498 <giam_moto2+0xb8>)
 8001458:	f000 fcaa 	bl	8001db0 <HAL_GPIO_WritePin>
				lcd_put_cur(1,0);
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff f921 	bl	80006a6 <lcd_put_cur>
				sprintf(buffer,"speed moto2: %d%%",duty2);
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <giam_moto2+0xb4>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	490d      	ldr	r1, [pc, #52]	; (80014a4 <giam_moto2+0xc4>)
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fc5c 	bl	8005d2c <siprintf>
				lcd_send_string(buffer);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f970 	bl	800075e <lcd_send_string>
				__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,duty2);
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <giam_moto2+0xb4>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <giam_moto2+0xbc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
			}
			}
		}
		vTaskDelay(20);
 8001488:	2014      	movs	r0, #20
 800148a:	f003 f9bf 	bl	800480c <vTaskDelay>
		if(xButton6Semphore != NULL){
 800148e:	e7ab      	b.n	80013e8 <giam_moto2+0x8>
 8001490:	20000394 	.word	0x20000394
 8001494:	2000039c 	.word	0x2000039c
 8001498:	40020c00 	.word	0x40020c00
 800149c:	20000338 	.word	0x20000338
 80014a0:	08006680 	.word	0x08006680
 80014a4:	08006694 	.word	0x08006694

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_MspInit+0x54>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_MspInit+0x54>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x54>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_MspInit+0x54>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_MspInit+0x54>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_MspInit+0x54>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	210f      	movs	r1, #15
 80014f6:	f06f 0001 	mvn.w	r0, #1
 80014fa:	f000 fa94 	bl	8001a26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_I2C_MspInit+0x84>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12b      	bne.n	8001586 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800154a:	23c0      	movs	r3, #192	; 0xc0
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154e:	2312      	movs	r3, #18
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <HAL_I2C_MspInit+0x8c>)
 8001566:	f000 fa87 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_I2C_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40005400 	.word	0x40005400
 8001594:	40023800 	.word	0x40023800
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_TIM_Base_MspInit+0x3c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10d      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_TIM_MspPostInit+0x68>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d11e      	bne.n	8001640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_TIM_MspPostInit+0x6c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800161e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001630:	2301      	movs	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_TIM_MspPostInit+0x70>)
 800163c:	f000 fa1c 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40010000 	.word	0x40010000
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 f8ce 	bl	8001824 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001688:	f003 fcf2 	bl	8005070 <xTaskGetSchedulerState>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001692:	f004 f8d1 	bl	8005838 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f004 faee 	bl	8005cac <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	200003a0 	.word	0x200003a0
 8001704:	20004110 	.word	0x20004110

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f004 faad 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff f813 	bl	8000788 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001770:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8001774:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001778:	2000410c 	.word	0x2000410c

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f931 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe7e 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f911 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	200003a4 	.word	0x200003a4

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200003a4 	.word	0x200003a4

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff47 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff5c 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffb0 	bl	80019cc <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e159      	b.n	8001d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8148 	bne.w	8001d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a2 	beq.w	8001d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x202>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x1fe>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a47      	ldr	r2, [pc, #284]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x1fa>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x1f6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a45      	ldr	r2, [pc, #276]	; (8001d78 <HAL_GPIO_Init+0x300>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x1f2>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f aea2 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e12b      	b.n	800204e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fb7e 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2224      	movs	r2, #36	; 0x24
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e48:	f001 f848 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4a81      	ldr	r2, [pc, #516]	; (8002058 <HAL_I2C_Init+0x274>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d807      	bhi.n	8001e68 <HAL_I2C_Init+0x84>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a80      	ldr	r2, [pc, #512]	; (800205c <HAL_I2C_Init+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	bf94      	ite	ls
 8001e60:	2301      	movls	r3, #1
 8001e62:	2300      	movhi	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e006      	b.n	8001e76 <HAL_I2C_Init+0x92>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a7d      	ldr	r2, [pc, #500]	; (8002060 <HAL_I2C_Init+0x27c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	bf94      	ite	ls
 8001e70:	2301      	movls	r3, #1
 8001e72:	2300      	movhi	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0e7      	b.n	800204e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a78      	ldr	r2, [pc, #480]	; (8002064 <HAL_I2C_Init+0x280>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a6a      	ldr	r2, [pc, #424]	; (8002058 <HAL_I2C_Init+0x274>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d802      	bhi.n	8001eb8 <HAL_I2C_Init+0xd4>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	e009      	b.n	8001ecc <HAL_I2C_Init+0xe8>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_I2C_Init+0x284>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	3301      	adds	r3, #1
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	495c      	ldr	r1, [pc, #368]	; (8002058 <HAL_I2C_Init+0x274>)
 8001ee8:	428b      	cmp	r3, r1
 8001eea:	d819      	bhi.n	8001f20 <HAL_I2C_Init+0x13c>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1e59      	subs	r1, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f00:	400b      	ands	r3, r1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_I2C_Init+0x138>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1e59      	subs	r1, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1a:	e051      	b.n	8001fc0 <HAL_I2C_Init+0x1dc>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e04f      	b.n	8001fc0 <HAL_I2C_Init+0x1dc>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_I2C_Init+0x168>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	440b      	add	r3, r1
 8001f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e012      	b.n	8001f72 <HAL_I2C_Init+0x18e>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	0099      	lsls	r1, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Init+0x196>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e022      	b.n	8001fc0 <HAL_I2C_Init+0x1dc>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <HAL_I2C_Init+0x1bc>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1e58      	subs	r0, r3, #1
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9e:	e00f      	b.n	8001fc0 <HAL_I2C_Init+0x1dc>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	0099      	lsls	r1, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	6809      	ldr	r1, [r1, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6911      	ldr	r1, [r2, #16]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68d2      	ldr	r2, [r2, #12]
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	000186a0 	.word	0x000186a0
 800205c:	001e847f 	.word	0x001e847f
 8002060:	003d08ff 	.word	0x003d08ff
 8002064:	431bde83 	.word	0x431bde83
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	461a      	mov	r2, r3
 8002078:	460b      	mov	r3, r1
 800207a:	817b      	strh	r3, [r7, #10]
 800207c:	4613      	mov	r3, r2
 800207e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fbe4 	bl	800184c <HAL_GetTick>
 8002084:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	f040 80e0 	bne.w	8002254 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2319      	movs	r3, #25
 800209a:	2201      	movs	r2, #1
 800209c:	4970      	ldr	r1, [pc, #448]	; (8002260 <HAL_I2C_Master_Transmit+0x1f4>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f964 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0d3      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x50>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0cc      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2221      	movs	r2, #33	; 0x21
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_I2C_Master_Transmit+0x1f8>)
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f89c 	bl	8002268 <I2C_MasterRequestWrite>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e08d      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002150:	e066      	b.n	8002220 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	6a39      	ldr	r1, [r7, #32]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f9de 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b04      	cmp	r3, #4
 8002168:	d107      	bne.n	800217a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d11b      	bne.n	80021f4 <HAL_I2C_Master_Transmit+0x188>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	6a39      	ldr	r1, [r7, #32]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f9ce 	bl	800259a <I2C_WaitOnBTFFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00d      	beq.n	8002220 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b04      	cmp	r3, #4
 800220a:	d107      	bne.n	800221c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e01a      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d194      	bne.n	8002152 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	e000      	b.n	8002256 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002254:	2302      	movs	r3, #2
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00100002 	.word	0x00100002
 8002264:	ffff0000 	.word	0xffff0000

08002268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d006      	beq.n	8002292 <I2C_MasterRequestWrite+0x2a>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d003      	beq.n	8002292 <I2C_MasterRequestWrite+0x2a>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002290:	d108      	bne.n	80022a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00b      	b.n	80022bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d107      	bne.n	80022bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f84f 	bl	800236c <I2C_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e2:	d103      	bne.n	80022ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e035      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f8:	d108      	bne.n	800230c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	e01b      	b.n	8002344 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800230c:	897b      	ldrh	r3, [r7, #10]
 800230e:	11db      	asrs	r3, r3, #7
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f003 0306 	and.w	r3, r3, #6
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f063 030f 	orn	r3, r3, #15
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <I2C_MasterRequestWrite+0xfc>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f875 	bl	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e010      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <I2C_MasterRequestWrite+0x100>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f865 	bl	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	00010008 	.word	0x00010008
 8002368:	00010002 	.word	0x00010002

0800236c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237c:	e025      	b.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d021      	beq.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7ff fa61 	bl	800184c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d116      	bne.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e023      	b.n	8002412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10d      	bne.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4013      	ands	r3, r2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	e00c      	b.n	800240a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d0b6      	beq.n	800237e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002428:	e051      	b.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002438:	d123      	bne.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e046      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d021      	beq.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7ff f9df 	bl	800184c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d116      	bne.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e020      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10c      	bne.n	80024f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4013      	ands	r3, r2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	e00b      	b.n	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d18d      	bne.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002524:	e02d      	b.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f878 	bl	800261c <I2C_IsAcknowledgeFailed>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e02d      	b.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d021      	beq.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f985 	bl	800184c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d116      	bne.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e007      	b.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d1ca      	bne.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a6:	e02d      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f837 	bl	800261c <I2C_IsAcknowledgeFailed>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e02d      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025be:	d021      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c0:	f7ff f944 	bl	800184c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d1ca      	bne.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d11b      	bne.n	800266c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800263c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e267      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d075      	beq.n	8002786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d112      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026be:	d10b      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05b      	beq.n	8002784 <HAL_RCC_OscConfig+0x108>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d157      	bne.n	8002784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e242      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x74>
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b70      	ldr	r3, [pc, #448]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6f      	ldr	r2, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6c      	ldr	r2, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 8002714:	4b69      	ldr	r3, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a68      	ldr	r2, [pc, #416]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b66      	ldr	r3, [pc, #408]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a65      	ldr	r2, [pc, #404]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f88a 	bl	800184c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f886 	bl	800184c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e207      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xc0>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f876 	bl	800184c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff f872 	bl	800184c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1f3      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0xe8>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c7      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCC_OscConfig+0x244>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7ff f82b 	bl	800184c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fa:	f7ff f827 	bl	800184c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a8      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4925      	ldr	r1, [pc, #148]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x244>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff f80a 	bl	800184c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283c:	f7ff f806 	bl	800184c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e187      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d036      	beq.n	80028d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_RCC_OscConfig+0x248>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe ffea 	bl	800184c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe ffe6 	bl	800184c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e167      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x200>
 800289a:	e01b      	b.n	80028d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x248>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe ffd3 	bl	800184c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00e      	b.n	80028c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe ffcf 	bl	800184c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d907      	bls.n	80028c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e150      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470000 	.word	0x42470000
 80028c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ea      	bne.n	80028aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8097 	beq.w	8002a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b81      	ldr	r3, [pc, #516]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b7a      	ldr	r3, [pc, #488]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b77      	ldr	r3, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a73      	ldr	r2, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe ff8f 	bl	800184c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe ff8b 	bl	800184c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e10c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x2ea>
 8002958:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x30c>
 800296e:	4b5f      	ldr	r3, [pc, #380]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a5e      	ldr	r2, [pc, #376]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b5c      	ldr	r3, [pc, #368]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a5b      	ldr	r2, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002988:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe ff50 	bl	800184c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe ff4c 	bl	800184c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0cb      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ee      	beq.n	80029b0 <HAL_RCC_OscConfig+0x334>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff3a 	bl	800184c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe ff36 	bl	800184c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0b5      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ee      	bne.n	80029dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a38      	ldr	r2, [pc, #224]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a1 	beq.w	8002b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d05c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d141      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe ff0a 	bl	800184c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe ff06 	bl	800184c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e087      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	491b      	ldr	r1, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fedf 	bl	800184c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fedb 	bl	800184c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e05c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x416>
 8002ab0:	e054      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fec8 	bl	800184c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fec4 	bl	800184c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e045      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
 8002ade:	e03d      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e038      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x4ec>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d028      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d121      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d111      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	3b01      	subs	r3, #1
 8002b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cc      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d90c      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d044      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e067      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4934      	ldr	r1, [pc, #208]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fdf6 	bl	800184c <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fdf2 	bl	800184c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e04f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d20c      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fd56 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023c00 	.word	0x40023c00
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	080066b0 	.word	0x080066b0
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b090      	sub	sp, #64	; 0x40
 8002d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
 8002d44:	2300      	movs	r3, #0
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d48:	2300      	movs	r3, #0
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	f200 80a1 	bhi.w	8002ea4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x34>
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6a:	e09b      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d70:	e09b      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d72:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d76:	e098      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d82:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d028      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	2200      	movs	r2, #0
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	627a      	str	r2, [r7, #36]	; 0x24
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002da0:	2100      	movs	r1, #0
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da4:	fb03 f201 	mul.w	r2, r3, r1
 8002da8:	2300      	movs	r3, #0
 8002daa:	fb00 f303 	mul.w	r3, r0, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	4a43      	ldr	r2, [pc, #268]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db2:	fba0 1202 	umull	r1, r2, r0, r2
 8002db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db8:	460a      	mov	r2, r1
 8002dba:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbe:	4413      	add	r3, r2
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	61fa      	str	r2, [r7, #28]
 8002dca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dd2:	f7fd fa55 	bl	8000280 <__aeabi_uldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4613      	mov	r3, r2
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dde:	e053      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b35      	ldr	r3, [pc, #212]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	617a      	str	r2, [r7, #20]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002df2:	f04f 0b00 	mov.w	fp, #0
 8002df6:	4652      	mov	r2, sl
 8002df8:	465b      	mov	r3, fp
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e12:	eb63 090b 	sbc.w	r9, r3, fp
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e2a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e2e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	00eb      	lsls	r3, r5, #3
 8002e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e40:	00e2      	lsls	r2, r4, #3
 8002e42:	4614      	mov	r4, r2
 8002e44:	461d      	mov	r5, r3
 8002e46:	eb14 030a 	adds.w	r3, r4, sl
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	eb45 030b 	adc.w	r3, r5, fp
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	2200      	movs	r2, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	60fa      	str	r2, [r7, #12]
 8002e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e7c:	f7fd fa00 	bl	8000280 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x184>)
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3740      	adds	r7, #64	; 0x40
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	017d7840 	.word	0x017d7840

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	080066c0 	.word	0x080066c0

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fb36 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fac0 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e041      	b.n	8003038 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f839 	bl	8003040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f000 fa71 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x24>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e022      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start+0x3e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e015      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e068      	b.n	8003198 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	e013      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x92>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e4:	e00b      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	e003      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fc84 	bl	8003a14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <HAL_TIM_PWM_Start+0x14c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_TIM_PWM_Start+0x14c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_TIM_PWM_Start+0x10e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d013      	beq.n	8003162 <HAL_TIM_PWM_Start+0x10e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_TIM_PWM_Start+0x150>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_TIM_PWM_Start+0x10e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_TIM_PWM_Start+0x154>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_TIM_PWM_Start+0x10e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIM_PWM_Start+0x158>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_TIM_PWM_Start+0x10e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_PWM_Start+0x15c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d111      	bne.n	8003186 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b06      	cmp	r3, #6
 8003172:	d010      	beq.n	8003196 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0201 	orr.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	e007      	b.n	8003196 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800
 80031ac:	40000c00 	.word	0x40000c00
 80031b0:	40014000 	.word	0x40014000

080031b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e0ae      	b.n	8003330 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	f200 809f 	bhi.w	8003320 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	08003321 	.word	0x08003321
 80031f0:	08003321 	.word	0x08003321
 80031f4:	08003321 	.word	0x08003321
 80031f8:	0800325d 	.word	0x0800325d
 80031fc:	08003321 	.word	0x08003321
 8003200:	08003321 	.word	0x08003321
 8003204:	08003321 	.word	0x08003321
 8003208:	0800329f 	.word	0x0800329f
 800320c:	08003321 	.word	0x08003321
 8003210:	08003321 	.word	0x08003321
 8003214:	08003321 	.word	0x08003321
 8003218:	080032df 	.word	0x080032df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f9d0 	bl	80035c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6999      	ldr	r1, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	619a      	str	r2, [r3, #24]
      break;
 800325a:	e064      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fa16 	bl	8003694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6999      	ldr	r1, [r3, #24]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	021a      	lsls	r2, r3, #8
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]
      break;
 800329c:	e043      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa61 	bl	800376c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0208 	orr.w	r2, r2, #8
 80032b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0204 	bic.w	r2, r2, #4
 80032c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69d9      	ldr	r1, [r3, #28]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
      break;
 80032dc:	e023      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 faab 	bl	8003840 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69d9      	ldr	r1, [r3, #28]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
      break;
 800331e:	e002      	b.n	8003326 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIM_ConfigClockSource+0x1c>
 8003350:	2302      	movs	r3, #2
 8003352:	e0b4      	b.n	80034be <HAL_TIM_ConfigClockSource+0x186>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	d03e      	beq.n	800340c <HAL_TIM_ConfigClockSource+0xd4>
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	f200 8087 	bhi.w	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	f000 8086 	beq.w	80034aa <HAL_TIM_ConfigClockSource+0x172>
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	d87f      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b70      	cmp	r3, #112	; 0x70
 80033a6:	d01a      	beq.n	80033de <HAL_TIM_ConfigClockSource+0xa6>
 80033a8:	2b70      	cmp	r3, #112	; 0x70
 80033aa:	d87b      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b60      	cmp	r3, #96	; 0x60
 80033ae:	d050      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x11a>
 80033b0:	2b60      	cmp	r3, #96	; 0x60
 80033b2:	d877      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b50      	cmp	r3, #80	; 0x50
 80033b6:	d03c      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0xfa>
 80033b8:	2b50      	cmp	r3, #80	; 0x50
 80033ba:	d873      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d058      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x13a>
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d86f      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d064      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	2b30      	cmp	r3, #48	; 0x30
 80033ca:	d86b      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d060      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d867      	bhi.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05c      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x15a>
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d05a      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	e062      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f000 faf1 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
      break;
 800340a:	e04f      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6899      	ldr	r1, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f000 fada 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800342e:	609a      	str	r2, [r3, #8]
      break;
 8003430:	e03c      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	f000 fa4e 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2150      	movs	r1, #80	; 0x50
 800344a:	4618      	mov	r0, r3
 800344c:	f000 faa7 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003450:	e02c      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	461a      	mov	r2, r3
 8003460:	f000 fa6d 	bl	800393e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2160      	movs	r1, #96	; 0x60
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fa97 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003470:	e01c      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 fa2e 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2140      	movs	r1, #64	; 0x40
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fa87 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003490:	e00c      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f000 fa7e 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 80034a2:	e003      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      break;
 80034a8:	e000      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a34      	ldr	r2, [pc, #208]	; (80035ac <TIM_Base_SetConfig+0xe4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <TIM_Base_SetConfig+0x38>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d00b      	beq.n	8003500 <TIM_Base_SetConfig+0x38>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a31      	ldr	r2, [pc, #196]	; (80035b0 <TIM_Base_SetConfig+0xe8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_Base_SetConfig+0x38>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <TIM_Base_SetConfig+0xec>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0x38>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <TIM_Base_SetConfig+0xf0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d108      	bne.n	8003512 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a25      	ldr	r2, [pc, #148]	; (80035ac <TIM_Base_SetConfig+0xe4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01b      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d017      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a22      	ldr	r2, [pc, #136]	; (80035b0 <TIM_Base_SetConfig+0xe8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <TIM_Base_SetConfig+0xec>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00f      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <TIM_Base_SetConfig+0xf0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <TIM_Base_SetConfig+0xf4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <TIM_Base_SetConfig+0xf8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_Base_SetConfig+0xfc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <TIM_Base_SetConfig+0xe4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d103      	bne.n	8003598 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	615a      	str	r2, [r3, #20]
}
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800

080035c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f023 0201 	bic.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0302 	bic.w	r3, r3, #2
 8003610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <TIM_OC1_SetConfig+0xc8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10c      	bne.n	800363e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0308 	bic.w	r3, r3, #8
 800362a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a13      	ldr	r2, [pc, #76]	; (8003690 <TIM_OC1_SetConfig+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d111      	bne.n	800366a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800364c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40010000 	.word	0x40010000

08003694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0210 	bic.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0320 	bic.w	r3, r3, #32
 80036de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <TIM_OC2_SetConfig+0xd4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10d      	bne.n	8003710 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <TIM_OC2_SetConfig+0xd4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d113      	bne.n	8003740 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000

0800376c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <TIM_OC3_SetConfig+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10d      	bne.n	80037e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <TIM_OC3_SetConfig+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d113      	bne.n	8003816 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <TIM_OC4_SetConfig+0x9c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000

080038e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 030a 	bic.w	r3, r3, #10
 800391c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800397a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2201      	movs	r2, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e050      	b.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d013      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a16      	ldr	r2, [pc, #88]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e03d      	b.n	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f103 0208 	add.w	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f103 0208 	add.w	r2, r3, #8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 0208 	add.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d103      	bne.n	8003ca2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e00c      	b.n	8003cbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e002      	b.n	8003cb0 <vListInsert+0x2e>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d2f6      	bcs.n	8003caa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6852      	ldr	r2, [r2, #4]
 8003d14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d103      	bne.n	8003d28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d72:	f001 fccf 	bl	8005714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	3b01      	subs	r3, #1
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	22ff      	movs	r2, #255	; 0xff
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	22ff      	movs	r2, #255	; 0xff
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d114      	bne.n	8003df2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01a      	beq.n	8003e06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ff8f 	bl	8004cf8 <xTaskRemoveFromEventList>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <xQueueGenericReset+0xcc>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	e009      	b.n	8003e06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3310      	adds	r3, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fef2 	bl	8003be0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3324      	adds	r3, #36	; 0x24
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff feed 	bl	8003be0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e06:	f001 fcb5 	bl	8005774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	613b      	str	r3, [r7, #16]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3348      	adds	r3, #72	; 0x48
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fd41 	bl	80058d8 <pvPortMalloc>
 8003e56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3348      	adds	r3, #72	; 0x48
 8003e66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e70:	79fa      	ldrb	r2, [r7, #7]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f805 	bl	8003e8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e82:	69bb      	ldr	r3, [r7, #24]
	}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d103      	bne.n	8003ea8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eba:	2101      	movs	r1, #1
 8003ebc:	69b8      	ldr	r0, [r7, #24]
 8003ebe:	f7ff ff43 	bl	8003d48 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	; 0x38
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eda:	2300      	movs	r3, #0
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xQueueGenericSend+0x32>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <xQueueGenericSend+0x40>
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericSend+0x44>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericSend+0x46>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <xQueueGenericSend+0x60>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d103      	bne.n	8003f3a <xQueueGenericSend+0x6e>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <xQueueGenericSend+0x72>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <xQueueGenericSend+0x74>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	623b      	str	r3, [r7, #32]
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f5a:	f001 f889 	bl	8005070 <xTaskGetSchedulerState>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xQueueGenericSend+0x9e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <xQueueGenericSend+0xa2>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueGenericSend+0xa4>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f8a:	f001 fbc3 	bl	8005714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <xQueueGenericSend+0xd4>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d129      	bne.n	8003ff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa6:	f000 f9b3 	bl	8004310 <prvCopyDataToQueue>
 8003faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d010      	beq.n	8003fd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	3324      	adds	r3, #36	; 0x24
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe9d 	bl	8004cf8 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <xQueueGenericSend+0x1f8>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e00a      	b.n	8003fec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <xQueueGenericSend+0x1f8>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fec:	f001 fbc2 	bl	8005774 <vPortExitCritical>
				return pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e063      	b.n	80040bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ffa:	f001 fbbb 	bl	8005774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e05c      	b.n	80040bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fed5 	bl	8004dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004012:	2301      	movs	r3, #1
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004016:	f001 fbad 	bl	8005774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800401a:	f000 fc8b 	bl	8004934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800401e:	f001 fb79 	bl	8005714 <vPortEnterCritical>
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004028:	b25b      	sxtb	r3, r3
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d103      	bne.n	8004038 <xQueueGenericSend+0x16c>
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d103      	bne.n	800404e <xQueueGenericSend+0x182>
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800404e:	f001 fb91 	bl	8005774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004052:	1d3a      	adds	r2, r7, #4
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fec4 	bl	8004de8 <xTaskCheckForTimeOut>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d124      	bne.n	80040b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004068:	f000 fa24 	bl	80044b4 <prvIsQueueFull>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d018      	beq.n	80040a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	3310      	adds	r3, #16
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fe18 	bl	8004cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004082:	f000 f9af 	bl	80043e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004086:	f000 fc63 	bl	8004950 <xTaskResumeAll>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af7c 	bne.w	8003f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <xQueueGenericSend+0x1f8>)
 8004094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	e772      	b.n	8003f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a6:	f000 f99d 	bl	80043e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040aa:	f000 fc51 	bl	8004950 <xTaskResumeAll>
 80040ae:	e76c      	b.n	8003f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b2:	f000 f997 	bl	80043e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040b6:	f000 fc4b 	bl	8004950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3738      	adds	r7, #56	; 0x38
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	623b      	str	r3, [r7, #32]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	61fb      	str	r3, [r7, #28]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004118:	f000 ffaa 	bl	8005070 <xTaskGetSchedulerState>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <xQueueSemaphoreTake+0x60>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <xQueueSemaphoreTake+0x64>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <xQueueSemaphoreTake+0x66>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	61bb      	str	r3, [r7, #24]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004148:	f001 fae4 	bl	8005714 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d024      	beq.n	80041a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004168:	f001 f92a 	bl	80053c0 <pvTaskIncrementMutexHeldCount>
 800416c:	4602      	mov	r2, r0
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00f      	beq.n	800419a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	3310      	adds	r3, #16
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fdba 	bl	8004cf8 <xTaskRemoveFromEventList>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800418a:	4b54      	ldr	r3, [pc, #336]	; (80042dc <xQueueSemaphoreTake+0x214>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800419a:	f001 faeb 	bl	8005774 <vPortExitCritical>
				return pdPASS;
 800419e:	2301      	movs	r3, #1
 80041a0:	e097      	b.n	80042d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	617b      	str	r3, [r7, #20]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80041c4:	f001 fad6 	bl	8005774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e082      	b.n	80042d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041d2:	f107 030c 	add.w	r3, r7, #12
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fdf0 	bl	8004dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041e0:	f001 fac8 	bl	8005774 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041e4:	f000 fba6 	bl	8004934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041e8:	f001 fa94 	bl	8005714 <vPortEnterCritical>
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d103      	bne.n	8004202 <xQueueSemaphoreTake+0x13a>
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004208:	b25b      	sxtb	r3, r3
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d103      	bne.n	8004218 <xQueueSemaphoreTake+0x150>
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004218:	f001 faac 	bl	8005774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800421c:	463a      	mov	r2, r7
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fddf 	bl	8004de8 <xTaskCheckForTimeOut>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d132      	bne.n	8004296 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004232:	f000 f929 	bl	8004488 <prvIsQueueEmpty>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d026      	beq.n	800428a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004244:	f001 fa66 	bl	8005714 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff2d 	bl	80050ac <xTaskPriorityInherit>
 8004252:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004254:	f001 fa8e 	bl	8005774 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fd25 	bl	8004cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004268:	f000 f8bc 	bl	80043e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800426c:	f000 fb70 	bl	8004950 <xTaskResumeAll>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	f47f af68 	bne.w	8004148 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004278:	4b18      	ldr	r3, [pc, #96]	; (80042dc <xQueueSemaphoreTake+0x214>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e75e      	b.n	8004148 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800428a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800428c:	f000 f8aa 	bl	80043e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004290:	f000 fb5e 	bl	8004950 <xTaskResumeAll>
 8004294:	e758      	b.n	8004148 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004298:	f000 f8a4 	bl	80043e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429c:	f000 fb58 	bl	8004950 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042a2:	f000 f8f1 	bl	8004488 <prvIsQueueEmpty>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f af4d 	beq.w	8004148 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80042b4:	f001 fa2e 	bl	8005714 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80042b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042ba:	f000 f811 	bl	80042e0 <prvGetDisinheritPriorityAfterTimeout>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ffec 	bl	80052a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80042cc:	f001 fa52 	bl	8005774 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3738      	adds	r7, #56	; 0x38
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e001      	b.n	8004302 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004302:	68fb      	ldr	r3, [r7, #12]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d14d      	bne.n	80043d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff2c 	bl	8005198 <xTaskPriorityDisinherit>
 8004340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e043      	b.n	80043d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d119      	bne.n	8004384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6858      	ldr	r0, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	f001 fcd0 	bl	8005d00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d32b      	bcc.n	80043d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e026      	b.n	80043d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68d8      	ldr	r0, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	461a      	mov	r2, r3
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	f001 fcb6 	bl	8005d00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	425b      	negs	r3, r3
 800439e:	441a      	add	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d207      	bcs.n	80043c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	425b      	negs	r3, r3
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d105      	bne.n	80043d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043da:	697b      	ldr	r3, [r7, #20]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043ec:	f001 f992 	bl	8005714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043f8:	e011      	b.n	800441e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d012      	beq.n	8004428 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3324      	adds	r3, #36	; 0x24
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fc76 	bl	8004cf8 <xTaskRemoveFromEventList>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004412:	f000 fd4b 	bl	8004eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	3b01      	subs	r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dce9      	bgt.n	80043fa <prvUnlockQueue+0x16>
 8004426:	e000      	b.n	800442a <prvUnlockQueue+0x46>
					break;
 8004428:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004432:	f001 f99f 	bl	8005774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004436:	f001 f96d 	bl	8005714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004440:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004442:	e011      	b.n	8004468 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3310      	adds	r3, #16
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fc51 	bl	8004cf8 <xTaskRemoveFromEventList>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800445c:	f000 fd26 	bl	8004eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004460:	7bbb      	ldrb	r3, [r7, #14]
 8004462:	3b01      	subs	r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800446c:	2b00      	cmp	r3, #0
 800446e:	dce9      	bgt.n	8004444 <prvUnlockQueue+0x60>
 8004470:	e000      	b.n	8004474 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004472:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	22ff      	movs	r2, #255	; 0xff
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800447c:	f001 f97a 	bl	8005774 <vPortExitCritical>
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004490:	f001 f940 	bl	8005714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e001      	b.n	80044a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f001 f965 	bl	8005774 <vPortExitCritical>

	return xReturn;
 80044aa:	68fb      	ldr	r3, [r7, #12]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044bc:	f001 f92a 	bl	8005714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d102      	bne.n	80044d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044cc:	2301      	movs	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e001      	b.n	80044d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044d6:	f001 f94d 	bl	8005774 <vPortExitCritical>

	return xReturn;
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08e      	sub	sp, #56	; 0x38
 80044e8:	af04      	add	r7, sp, #16
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xTaskCreateStatic+0x2a>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	623b      	str	r3, [r7, #32]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xTaskCreateStatic+0x46>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61fb      	str	r3, [r7, #28]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800452a:	2354      	movs	r3, #84	; 0x54
 800452c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b54      	cmp	r3, #84	; 0x54
 8004532:	d00a      	beq.n	800454a <xTaskCreateStatic+0x66>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61bb      	str	r3, [r7, #24]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800454a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01e      	beq.n	8004590 <xTaskCreateStatic+0xac>
 8004552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2202      	movs	r2, #2
 8004566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800456a:	2300      	movs	r3, #0
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	9302      	str	r3, [sp, #8]
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f850 	bl	8004628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800458a:	f000 f8d5 	bl	8004738 <prvAddNewTaskToReadyList>
 800458e:	e001      	b.n	8004594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004594:	697b      	ldr	r3, [r7, #20]
	}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08c      	sub	sp, #48	; 0x30
 80045a2:	af04      	add	r7, sp, #16
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 f990 	bl	80058d8 <pvPortMalloc>
 80045b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045c0:	2054      	movs	r0, #84	; 0x54
 80045c2:	f001 f989 	bl	80058d8 <pvPortMalloc>
 80045c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
 80045d4:	e005      	b.n	80045e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f001 fa4a 	bl	8005a70 <vPortFree>
 80045dc:	e001      	b.n	80045e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9303      	str	r3, [sp, #12]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f80e 	bl	8004628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800460c:	69f8      	ldr	r0, [r7, #28]
 800460e:	f000 f893 	bl	8004738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004612:	2301      	movs	r3, #1
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e002      	b.n	800461e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800461e:	69bb      	ldr	r3, [r7, #24]
	}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004640:	3b01      	subs	r3, #1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <prvInitialiseNewTask+0x48>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	617b      	str	r3, [r7, #20]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01f      	beq.n	80046b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e012      	b.n	80046a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	7819      	ldrb	r1, [r3, #0]
 8004684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	3334      	adds	r3, #52	; 0x34
 800468c:	460a      	mov	r2, r1
 800468e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d9e9      	bls.n	800467c <prvInitialiseNewTask+0x54>
 80046a8:	e000      	b.n	80046ac <prvInitialiseNewTask+0x84>
			{
				break;
 80046aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b4:	e003      	b.n	80046be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	2b06      	cmp	r3, #6
 80046c2:	d901      	bls.n	80046c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046c4:	2306      	movs	r3, #6
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	2200      	movs	r2, #0
 80046d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fa9e 	bl	8003c20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	3318      	adds	r3, #24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fa99 	bl	8003c20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	f1c3 0207 	rsb	r2, r3, #7
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	2200      	movs	r2, #0
 8004708:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f000 fecc 	bl	80054b4 <pxPortInitialiseStack>
 800471c:	4602      	mov	r2, r0
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800472e:	bf00      	nop
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004740:	f000 ffe8 	bl	8005714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <prvAddNewTaskToReadyList+0xb8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <prvAddNewTaskToReadyList+0xb8>)
 800474c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <prvAddNewTaskToReadyList+0xbc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004756:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <prvAddNewTaskToReadyList+0xbc>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800475c:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <prvAddNewTaskToReadyList+0xb8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d110      	bne.n	8004786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004764:	f000 fbc6 	bl	8004ef4 <prvInitialiseTaskLists>
 8004768:	e00d      	b.n	8004786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <prvAddNewTaskToReadyList+0xc0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <prvAddNewTaskToReadyList+0xbc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	429a      	cmp	r2, r3
 800477e:	d802      	bhi.n	8004786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <prvAddNewTaskToReadyList+0xbc>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 800478e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <prvAddNewTaskToReadyList+0xc8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <prvAddNewTaskToReadyList+0xc8>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a15      	ldr	r2, [pc, #84]	; (8004804 <prvAddNewTaskToReadyList+0xcc>)
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7ff fa3e 	bl	8003c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047be:	f000 ffd9 	bl	8005774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <prvAddNewTaskToReadyList+0xc0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <prvAddNewTaskToReadyList+0xbc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d207      	bcs.n	80047e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <prvAddNewTaskToReadyList+0xd0>)
 80047da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	200004a8 	.word	0x200004a8
 80047f4:	200003a8 	.word	0x200003a8
 80047f8:	200004b4 	.word	0x200004b4
 80047fc:	200004c4 	.word	0x200004c4
 8004800:	200004b0 	.word	0x200004b0
 8004804:	200003ac 	.word	0x200003ac
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d017      	beq.n	800484e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <vTaskDelay+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <vTaskDelay+0x30>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800483c:	f000 f87a 	bl	8004934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004840:	2100      	movs	r1, #0
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fdd0 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004848:	f000 f882 	bl	8004950 <xTaskResumeAll>
 800484c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <vTaskDelay+0x64>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200004d0 	.word	0x200004d0
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004882:	463a      	mov	r2, r7
 8004884:	1d39      	adds	r1, r7, #4
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4618      	mov	r0, r3
 800488c:	f7fb fe7a 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	9202      	str	r2, [sp, #8]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	2300      	movs	r3, #0
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	460a      	mov	r2, r1
 80048a2:	491e      	ldr	r1, [pc, #120]	; (800491c <vTaskStartScheduler+0xa8>)
 80048a4:	481e      	ldr	r0, [pc, #120]	; (8004920 <vTaskStartScheduler+0xac>)
 80048a6:	f7ff fe1d 	bl	80044e4 <xTaskCreateStatic>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <vTaskStartScheduler+0xb0>)
 80048ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048b0:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <vTaskStartScheduler+0xb0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e001      	b.n	80048c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d116      	bne.n	80048f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	613b      	str	r3, [r7, #16]
}
 80048da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048dc:	4b12      	ldr	r3, [pc, #72]	; (8004928 <vTaskStartScheduler+0xb4>)
 80048de:	f04f 32ff 	mov.w	r2, #4294967295
 80048e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <vTaskStartScheduler+0xb8>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <vTaskStartScheduler+0xbc>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048f0:	f000 fe6e 	bl	80055d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048f4:	e00e      	b.n	8004914 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d10a      	bne.n	8004914 <vTaskStartScheduler+0xa0>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	60fb      	str	r3, [r7, #12]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <vTaskStartScheduler+0x9e>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	080066a8 	.word	0x080066a8
 8004920:	08004ec5 	.word	0x08004ec5
 8004924:	200004cc 	.word	0x200004cc
 8004928:	200004c8 	.word	0x200004c8
 800492c:	200004b4 	.word	0x200004b4
 8004930:	200004ac 	.word	0x200004ac

08004934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <vTaskSuspendAll+0x18>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a03      	ldr	r2, [pc, #12]	; (800494c <vTaskSuspendAll+0x18>)
 8004940:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	200004d0 	.word	0x200004d0

08004950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <xTaskResumeAll+0x114>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <xTaskResumeAll+0x2c>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	603b      	str	r3, [r7, #0]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800497c:	f000 feca 	bl	8005714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004980:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <xTaskResumeAll+0x114>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3b01      	subs	r3, #1
 8004986:	4a37      	ldr	r2, [pc, #220]	; (8004a64 <xTaskResumeAll+0x114>)
 8004988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <xTaskResumeAll+0x114>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d161      	bne.n	8004a56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004992:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <xTaskResumeAll+0x118>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d05d      	beq.n	8004a56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800499a:	e02e      	b.n	80049fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <xTaskResumeAll+0x11c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3318      	adds	r3, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f9a3 	bl	8003cf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff f99e 	bl	8003cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <xTaskResumeAll+0x120>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <xTaskResumeAll+0x120>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <xTaskResumeAll+0x124>)
 80049d8:	441a      	add	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7ff f92a 	bl	8003c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <xTaskResumeAll+0x128>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80049f4:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <xTaskResumeAll+0x12c>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <xTaskResumeAll+0x11c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1cc      	bne.n	800499c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a08:	f000 fb12 	bl	8005030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <xTaskResumeAll+0x130>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a18:	f000 f836 	bl	8004a88 <xTaskIncrementTick>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <xTaskResumeAll+0x12c>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f1      	bne.n	8004a18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <xTaskResumeAll+0x130>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <xTaskResumeAll+0x12c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <xTaskResumeAll+0x134>)
 8004a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a56:	f000 fe8d 	bl	8005774 <vPortExitCritical>

	return xAlreadyYielded;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200004d0 	.word	0x200004d0
 8004a68:	200004a8 	.word	0x200004a8
 8004a6c:	20000468 	.word	0x20000468
 8004a70:	200004b0 	.word	0x200004b0
 8004a74:	200003ac 	.word	0x200003ac
 8004a78:	200003a8 	.word	0x200003a8
 8004a7c:	200004bc 	.word	0x200004bc
 8004a80:	200004b8 	.word	0x200004b8
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a92:	4b4e      	ldr	r3, [pc, #312]	; (8004bcc <xTaskIncrementTick+0x144>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 808e 	bne.w	8004bb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <xTaskIncrementTick+0x148>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004aa4:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <xTaskIncrementTick+0x148>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d120      	bne.n	8004af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <xTaskIncrementTick+0x14c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	603b      	str	r3, [r7, #0]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xTaskIncrementTick+0x46>
 8004ad0:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <xTaskIncrementTick+0x14c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <xTaskIncrementTick+0x150>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <xTaskIncrementTick+0x14c>)
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <xTaskIncrementTick+0x150>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <xTaskIncrementTick+0x154>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <xTaskIncrementTick+0x154>)
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	f000 fa9f 	bl	8005030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004af2:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d348      	bcc.n	8004b8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afc:	4b35      	ldr	r3, [pc, #212]	; (8004bd4 <xTaskIncrementTick+0x14c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	601a      	str	r2, [r3, #0]
					break;
 8004b0e:	e03e      	b.n	8004b8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b10:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <xTaskIncrementTick+0x14c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d203      	bcs.n	8004b30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b28:	4a2d      	ldr	r2, [pc, #180]	; (8004be0 <xTaskIncrementTick+0x158>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b2e:	e02e      	b.n	8004b8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f8dd 	bl	8003cf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	3318      	adds	r3, #24
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff f8d4 	bl	8003cf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <xTaskIncrementTick+0x15c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <xTaskIncrementTick+0x15c>)
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <xTaskIncrementTick+0x160>)
 8004b6c:	441a      	add	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f7ff f860 	bl	8003c3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	; (8004bec <xTaskIncrementTick+0x164>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d3b9      	bcc.n	8004afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8c:	e7b6      	b.n	8004afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <xTaskIncrementTick+0x164>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4914      	ldr	r1, [pc, #80]	; (8004be8 <xTaskIncrementTick+0x160>)
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d901      	bls.n	8004baa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <xTaskIncrementTick+0x168>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e004      	b.n	8004bc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <xTaskIncrementTick+0x16c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <xTaskIncrementTick+0x16c>)
 8004bc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200004d0 	.word	0x200004d0
 8004bd0:	200004ac 	.word	0x200004ac
 8004bd4:	20000460 	.word	0x20000460
 8004bd8:	20000464 	.word	0x20000464
 8004bdc:	200004c0 	.word	0x200004c0
 8004be0:	200004c8 	.word	0x200004c8
 8004be4:	200004b0 	.word	0x200004b0
 8004be8:	200003ac 	.word	0x200003ac
 8004bec:	200003a8 	.word	0x200003a8
 8004bf0:	200004bc 	.word	0x200004bc
 8004bf4:	200004b8 	.word	0x200004b8

08004bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <vTaskSwitchContext+0xa4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <vTaskSwitchContext+0xa8>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c0c:	e03f      	b.n	8004c8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <vTaskSwitchContext+0xa8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c14:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <vTaskSwitchContext+0xac>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	f1c3 031f 	rsb	r3, r3, #31
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	491f      	ldr	r1, [pc, #124]	; (8004ca8 <vTaskSwitchContext+0xb0>)
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <vTaskSwitchContext+0x5a>
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <vTaskSwitchContext+0xb0>)
 8004c60:	4413      	add	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3308      	adds	r3, #8
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d104      	bne.n	8004c84 <vTaskSwitchContext+0x8c>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <vTaskSwitchContext+0xb4>)
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	200004d0 	.word	0x200004d0
 8004ca0:	200004bc 	.word	0x200004bc
 8004ca4:	200004b0 	.word	0x200004b0
 8004ca8:	200003ac 	.word	0x200003ac
 8004cac:	200003a8 	.word	0x200003a8

08004cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <vTaskPlaceOnEventList+0x44>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe ffcf 	bl	8003c82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f000 fb7e 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200003a8 	.word	0x200003a8

08004cf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe ffe3 	bl	8003cf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <xTaskRemoveFromEventList+0xac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11c      	bne.n	8004d70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe ffda 	bl	8003cf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <xTaskRemoveFromEventList+0xb0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	4a16      	ldr	r2, [pc, #88]	; (8004da8 <xTaskRemoveFromEventList+0xb0>)
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <xTaskRemoveFromEventList+0xb4>)
 8004d60:	441a      	add	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fe ff66 	bl	8003c3a <vListInsertEnd>
 8004d6e:	e005      	b.n	8004d7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3318      	adds	r3, #24
 8004d74:	4619      	mov	r1, r3
 8004d76:	480e      	ldr	r0, [pc, #56]	; (8004db0 <xTaskRemoveFromEventList+0xb8>)
 8004d78:	f7fe ff5f 	bl	8003c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <xTaskRemoveFromEventList+0xbc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d905      	bls.n	8004d96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <xTaskRemoveFromEventList+0xc0>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e001      	b.n	8004d9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d9a:	697b      	ldr	r3, [r7, #20]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	200004d0 	.word	0x200004d0
 8004da8:	200004b0 	.word	0x200004b0
 8004dac:	200003ac 	.word	0x200003ac
 8004db0:	20000468 	.word	0x20000468
 8004db4:	200003a8 	.word	0x200003a8
 8004db8:	200004bc 	.word	0x200004bc

08004dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <vTaskInternalSetTimeOutState+0x24>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <vTaskInternalSetTimeOutState+0x28>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	200004c0 	.word	0x200004c0
 8004de4:	200004ac 	.word	0x200004ac

08004de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e2a:	f000 fc73 	bl	8005714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <xTaskCheckForTimeOut+0xbc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d102      	bne.n	8004e4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e023      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <xTaskCheckForTimeOut+0xc0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d007      	beq.n	8004e6a <xTaskCheckForTimeOut+0x82>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e015      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d20b      	bcs.n	8004e8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad2      	subs	r2, r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff9b 	bl	8004dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	e004      	b.n	8004e96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f000 fc6d 	bl	8005774 <vPortExitCritical>

	return xReturn;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200004ac 	.word	0x200004ac
 8004ea8:	200004c0 	.word	0x200004c0

08004eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <vTaskMissedYield+0x14>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	200004bc 	.word	0x200004bc

08004ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ecc:	f000 f852 	bl	8004f74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <prvIdleTask+0x28>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d9f9      	bls.n	8004ecc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <prvIdleTask+0x2c>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ee8:	e7f0      	b.n	8004ecc <prvIdleTask+0x8>
 8004eea:	bf00      	nop
 8004eec:	200003ac 	.word	0x200003ac
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e00c      	b.n	8004f1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <prvInitialiseTaskLists+0x60>)
 8004f0c:	4413      	add	r3, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fe66 	bl	8003be0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3301      	adds	r3, #1
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d9ef      	bls.n	8004f00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f20:	480d      	ldr	r0, [pc, #52]	; (8004f58 <prvInitialiseTaskLists+0x64>)
 8004f22:	f7fe fe5d 	bl	8003be0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f26:	480d      	ldr	r0, [pc, #52]	; (8004f5c <prvInitialiseTaskLists+0x68>)
 8004f28:	f7fe fe5a 	bl	8003be0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f2c:	480c      	ldr	r0, [pc, #48]	; (8004f60 <prvInitialiseTaskLists+0x6c>)
 8004f2e:	f7fe fe57 	bl	8003be0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f32:	480c      	ldr	r0, [pc, #48]	; (8004f64 <prvInitialiseTaskLists+0x70>)
 8004f34:	f7fe fe54 	bl	8003be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <prvInitialiseTaskLists+0x74>)
 8004f3a:	f7fe fe51 	bl	8003be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <prvInitialiseTaskLists+0x78>)
 8004f40:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <prvInitialiseTaskLists+0x64>)
 8004f42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <prvInitialiseTaskLists+0x7c>)
 8004f46:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <prvInitialiseTaskLists+0x68>)
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200003ac 	.word	0x200003ac
 8004f58:	20000438 	.word	0x20000438
 8004f5c:	2000044c 	.word	0x2000044c
 8004f60:	20000468 	.word	0x20000468
 8004f64:	2000047c 	.word	0x2000047c
 8004f68:	20000494 	.word	0x20000494
 8004f6c:	20000460 	.word	0x20000460
 8004f70:	20000464 	.word	0x20000464

08004f74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f7a:	e019      	b.n	8004fb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f7c:	f000 fbca 	bl	8005714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f80:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <prvCheckTasksWaitingTermination+0x50>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe feb1 	bl	8003cf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <prvCheckTasksWaitingTermination+0x54>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <prvCheckTasksWaitingTermination+0x54>)
 8004f9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004fa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fa6:	f000 fbe5 	bl	8005774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f810 	bl	8004fd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <prvCheckTasksWaitingTermination+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e1      	bne.n	8004f7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000047c 	.word	0x2000047c
 8004fc8:	200004a8 	.word	0x200004a8
 8004fcc:	20000490 	.word	0x20000490

08004fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fd42 	bl	8005a70 <vPortFree>
				vPortFree( pxTCB );
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fd3f 	bl	8005a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ff2:	e018      	b.n	8005026 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d103      	bne.n	8005006 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd36 	bl	8005a70 <vPortFree>
	}
 8005004:	e00f      	b.n	8005026 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500c:	2b02      	cmp	r3, #2
 800500e:	d00a      	beq.n	8005026 <prvDeleteTCB+0x56>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <prvDeleteTCB+0x54>
	}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvResetNextTaskUnblockTime+0x38>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <prvResetNextTaskUnblockTime+0x3c>)
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
 8005046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005048:	e008      	b.n	800505c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <prvResetNextTaskUnblockTime+0x38>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <prvResetNextTaskUnblockTime+0x3c>)
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000460 	.word	0x20000460
 800506c:	200004c8 	.word	0x200004c8

08005070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <xTaskGetSchedulerState+0x34>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800507e:	2301      	movs	r3, #1
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	e008      	b.n	8005096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <xTaskGetSchedulerState+0x38>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d102      	bne.n	8005092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800508c:	2302      	movs	r3, #2
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	e001      	b.n	8005096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005096:	687b      	ldr	r3, [r7, #4]
	}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	200004b4 	.word	0x200004b4
 80050a8:	200004d0 	.word	0x200004d0

080050ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d05e      	beq.n	8005180 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4b31      	ldr	r3, [pc, #196]	; (800518c <xTaskPriorityInherit+0xe0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d24e      	bcs.n	800516e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db06      	blt.n	80050e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d8:	4b2c      	ldr	r3, [pc, #176]	; (800518c <xTaskPriorityInherit+0xe0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f1c3 0207 	rsb	r2, r3, #7
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6959      	ldr	r1, [r3, #20]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <xTaskPriorityInherit+0xe4>)
 80050f8:	4413      	add	r3, r2
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d12f      	bne.n	800515e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	3304      	adds	r3, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f7fe fdf6 	bl	8003cf4 <uxListRemove>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	2201      	movs	r2, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43da      	mvns	r2, r3
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <xTaskPriorityInherit+0xe8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4013      	ands	r3, r2
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <xTaskPriorityInherit+0xe8>)
 8005122:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <xTaskPriorityInherit+0xe0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	4b17      	ldr	r3, [pc, #92]	; (8005194 <xTaskPriorityInherit+0xe8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <xTaskPriorityInherit+0xe8>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <xTaskPriorityInherit+0xe4>)
 800514e:	441a      	add	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe fd6f 	bl	8003c3a <vListInsertEnd>
 800515c:	e004      	b.n	8005168 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <xTaskPriorityInherit+0xe0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e008      	b.n	8005180 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <xTaskPriorityInherit+0xe0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	429a      	cmp	r2, r3
 800517a:	d201      	bcs.n	8005180 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005180:	68fb      	ldr	r3, [r7, #12]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200003a8 	.word	0x200003a8
 8005190:	200003ac 	.word	0x200003ac
 8005194:	200004b0 	.word	0x200004b0

08005198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d06e      	beq.n	800528c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ae:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <xTaskPriorityDisinherit+0x100>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d00a      	beq.n	80051ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	429a      	cmp	r2, r3
 8005200:	d044      	beq.n	800528c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	2b00      	cmp	r3, #0
 8005208:	d140      	bne.n	800528c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3304      	adds	r3, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fd70 	bl	8003cf4 <uxListRemove>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d115      	bne.n	8005246 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	491f      	ldr	r1, [pc, #124]	; (800529c <xTaskPriorityDisinherit+0x104>)
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xTaskPriorityDisinherit+0xae>
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	2201      	movs	r2, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43da      	mvns	r2, r3
 800523c:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <xTaskPriorityDisinherit+0x108>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4013      	ands	r3, r2
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <xTaskPriorityDisinherit+0x108>)
 8005244:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f1c3 0207 	rsb	r2, r3, #7
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	2201      	movs	r2, #1
 8005260:	409a      	lsls	r2, r3
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTaskPriorityDisinherit+0x108>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <xTaskPriorityDisinherit+0x108>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a08      	ldr	r2, [pc, #32]	; (800529c <xTaskPriorityDisinherit+0x104>)
 800527a:	441a      	add	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7fe fcd9 	bl	8003c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800528c:	697b      	ldr	r3, [r7, #20]
	}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200003a8 	.word	0x200003a8
 800529c:	200003ac 	.word	0x200003ac
 80052a0:	200004b0 	.word	0x200004b0

080052a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d077      	beq.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60fb      	str	r3, [r7, #12]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d902      	bls.n	80052ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e002      	b.n	80052f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d058      	beq.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	d153      	bne.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005304:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	429a      	cmp	r2, r3
 800530c:	d10a      	bne.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60bb      	str	r3, [r7, #8]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	db04      	blt.n	8005342 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f1c3 0207 	rsb	r2, r3, #7
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	6959      	ldr	r1, [r3, #20]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005352:	4413      	add	r3, r2
 8005354:	4299      	cmp	r1, r3
 8005356:	d129      	bne.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fcc9 	bl	8003cf4 <uxListRemove>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	2201      	movs	r2, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43da      	mvns	r2, r3
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4013      	ands	r3, r2
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800537c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	2201      	movs	r2, #1
 8005384:	409a      	lsls	r2, r3
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800539e:	441a      	add	r2, r3
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe fc47 	bl	8003c3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ac:	bf00      	nop
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200003a8 	.word	0x200003a8
 80053b8:	200003ac 	.word	0x200003ac
 80053bc:	200004b0 	.word	0x200004b0

080053c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053d2:	3201      	adds	r2, #1
 80053d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80053d6:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053d8:	681b      	ldr	r3, [r3, #0]
	}
 80053da:	4618      	mov	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	200003a8 	.word	0x200003a8

080053e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f2:	4b29      	ldr	r3, [pc, #164]	; (8005498 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fc78 	bl	8003cf4 <uxListRemove>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	4a20      	ldr	r2, [pc, #128]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d10a      	bne.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	481a      	ldr	r0, [pc, #104]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800543a:	f7fe fbfe 	bl	8003c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800543e:	e026      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d209      	bcs.n	800546c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe fc0c 	bl	8003c82 <vListInsert>
}
 800546a:	e010      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe fc02 	bl	8003c82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d202      	bcs.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200004ac 	.word	0x200004ac
 800549c:	200003a8 	.word	0x200003a8
 80054a0:	200004b0 	.word	0x200004b0
 80054a4:	20000494 	.word	0x20000494
 80054a8:	20000464 	.word	0x20000464
 80054ac:	20000460 	.word	0x20000460
 80054b0:	200004c8 	.word	0x200004c8

080054b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b04      	subs	r3, #4
 80054c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b04      	subs	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054e4:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <pxPortInitialiseStack+0x64>)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b14      	subs	r3, #20
 80054ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3b04      	subs	r3, #4
 80054fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f06f 0202 	mvn.w	r2, #2
 8005502:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b20      	subs	r3, #32
 8005508:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800550a:	68fb      	ldr	r3, [r7, #12]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	0800551d 	.word	0x0800551d

0800551c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <prvTaskExitError+0x54>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d00a      	beq.n	8005546 <prvTaskExitError+0x2a>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <prvTaskExitError+0x28>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60bb      	str	r3, [r7, #8]
}
 8005558:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800555a:	bf00      	nop
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0fc      	beq.n	800555c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	2000000c 	.word	0x2000000c
	...

08005580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <pxCurrentTCBConst2>)
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	6808      	ldr	r0, [r1, #0]
 8005586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	f380 8809 	msr	PSP, r0
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f380 8811 	msr	BASEPRI, r0
 800559a:	4770      	bx	lr
 800559c:	f3af 8000 	nop.w

080055a0 <pxCurrentTCBConst2>:
 80055a0:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop

080055a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055a8:	4808      	ldr	r0, [pc, #32]	; (80055cc <prvPortStartFirstTask+0x24>)
 80055aa:	6800      	ldr	r0, [r0, #0]
 80055ac:	6800      	ldr	r0, [r0, #0]
 80055ae:	f380 8808 	msr	MSP, r0
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8814 	msr	CONTROL, r0
 80055ba:	b662      	cpsie	i
 80055bc:	b661      	cpsie	f
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	df00      	svc	0
 80055c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ca:	bf00      	nop
 80055cc:	e000ed08 	.word	0xe000ed08

080055d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055d6:	4b46      	ldr	r3, [pc, #280]	; (80056f0 <xPortStartScheduler+0x120>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a46      	ldr	r2, [pc, #280]	; (80056f4 <xPortStartScheduler+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10a      	bne.n	80055f6 <xPortStartScheduler+0x26>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	613b      	str	r3, [r7, #16]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055f6:	4b3e      	ldr	r3, [pc, #248]	; (80056f0 <xPortStartScheduler+0x120>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3f      	ldr	r2, [pc, #252]	; (80056f8 <xPortStartScheduler+0x128>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10a      	bne.n	8005616 <xPortStartScheduler+0x46>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60fb      	str	r3, [r7, #12]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <xPortStartScheduler+0x12c>)
 8005618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	22ff      	movs	r2, #255	; 0xff
 8005626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <xPortStartScheduler+0x130>)
 800563c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800563e:	4b31      	ldr	r3, [pc, #196]	; (8005704 <xPortStartScheduler+0x134>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005644:	e009      	b.n	800565a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005646:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <xPortStartScheduler+0x134>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3b01      	subs	r3, #1
 800564c:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <xPortStartScheduler+0x134>)
 800564e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	b2db      	uxtb	r3, r3
 8005658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d0ef      	beq.n	8005646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <xPortStartScheduler+0x134>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1c3 0307 	rsb	r3, r3, #7
 800566e:	2b04      	cmp	r3, #4
 8005670:	d00a      	beq.n	8005688 <xPortStartScheduler+0xb8>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60bb      	str	r3, [r7, #8]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005688:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <xPortStartScheduler+0x134>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <xPortStartScheduler+0x134>)
 8005690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005692:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <xPortStartScheduler+0x134>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800569a:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <xPortStartScheduler+0x134>)
 800569c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <xPortStartScheduler+0x138>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <xPortStartScheduler+0x138>)
 80056ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <xPortStartScheduler+0x138>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <xPortStartScheduler+0x138>)
 80056b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056be:	f000 f8dd 	bl	800587c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056c2:	4b12      	ldr	r3, [pc, #72]	; (800570c <xPortStartScheduler+0x13c>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056c8:	f000 f8fc 	bl	80058c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xPortStartScheduler+0x140>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0f      	ldr	r2, [pc, #60]	; (8005710 <xPortStartScheduler+0x140>)
 80056d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056d8:	f7ff ff66 	bl	80055a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056dc:	f7ff fa8c 	bl	8004bf8 <vTaskSwitchContext>
	prvTaskExitError();
 80056e0:	f7ff ff1c 	bl	800551c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	e000ed00 	.word	0xe000ed00
 80056f4:	410fc271 	.word	0x410fc271
 80056f8:	410fc270 	.word	0x410fc270
 80056fc:	e000e400 	.word	0xe000e400
 8005700:	200004d4 	.word	0x200004d4
 8005704:	200004d8 	.word	0x200004d8
 8005708:	e000ed20 	.word	0xe000ed20
 800570c:	2000000c 	.word	0x2000000c
 8005710:	e000ef34 	.word	0xe000ef34

08005714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	607b      	str	r3, [r7, #4]
}
 800572c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <vPortEnterCritical+0x58>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	4a0d      	ldr	r2, [pc, #52]	; (800576c <vPortEnterCritical+0x58>)
 8005736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <vPortEnterCritical+0x58>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10f      	bne.n	8005760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <vPortEnterCritical+0x5c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <vPortEnterCritical+0x4c>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	603b      	str	r3, [r7, #0]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <vPortEnterCritical+0x4a>
	}
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	2000000c 	.word	0x2000000c
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <vPortExitCritical+0x50>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <vPortExitCritical+0x24>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	607b      	str	r3, [r7, #4]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <vPortExitCritical+0x50>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3b01      	subs	r3, #1
 800579e:	4a09      	ldr	r2, [pc, #36]	; (80057c4 <vPortExitCritical+0x50>)
 80057a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <vPortExitCritical+0x50>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d105      	bne.n	80057b6 <vPortExitCritical+0x42>
 80057aa:	2300      	movs	r3, #0
 80057ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c
	...

080057d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057d0:	f3ef 8009 	mrs	r0, PSP
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <pxCurrentTCBConst>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f01e 0f10 	tst.w	lr, #16
 80057e0:	bf08      	it	eq
 80057e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ea:	6010      	str	r0, [r2, #0]
 80057ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057f4:	f380 8811 	msr	BASEPRI, r0
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f7ff f9fa 	bl	8004bf8 <vTaskSwitchContext>
 8005804:	f04f 0000 	mov.w	r0, #0
 8005808:	f380 8811 	msr	BASEPRI, r0
 800580c:	bc09      	pop	{r0, r3}
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005816:	f01e 0f10 	tst.w	lr, #16
 800581a:	bf08      	it	eq
 800581c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005820:	f380 8809 	msr	PSP, r0
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	f3af 8000 	nop.w

08005830 <pxCurrentTCBConst>:
 8005830:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
}
 8005850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005852:	f7ff f919 	bl	8004a88 <xTaskIncrementTick>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <xPortSysTickHandler+0x40>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <vPortSetupTimerInterrupt+0x34>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <vPortSetupTimerInterrupt+0x38>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800588c:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <vPortSetupTimerInterrupt+0x3c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <vPortSetupTimerInterrupt+0x40>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	099b      	lsrs	r3, r3, #6
 8005898:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <vPortSetupTimerInterrupt+0x44>)
 800589a:	3b01      	subs	r3, #1
 800589c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <vPortSetupTimerInterrupt+0x34>)
 80058a0:	2207      	movs	r2, #7
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	e000e010 	.word	0xe000e010
 80058b4:	e000e018 	.word	0xe000e018
 80058b8:	20000000 	.word	0x20000000
 80058bc:	10624dd3 	.word	0x10624dd3
 80058c0:	e000e014 	.word	0xe000e014

080058c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058d4 <vPortEnableVFP+0x10>
 80058c8:	6801      	ldr	r1, [r0, #0]
 80058ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ce:	6001      	str	r1, [r0, #0]
 80058d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058d2:	bf00      	nop
 80058d4:	e000ed88 	.word	0xe000ed88

080058d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	; 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058e4:	f7ff f826 	bl	8004934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058e8:	4b5b      	ldr	r3, [pc, #364]	; (8005a58 <pvPortMalloc+0x180>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058f0:	f000 f920 	bl	8005b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058f4:	4b59      	ldr	r3, [pc, #356]	; (8005a5c <pvPortMalloc+0x184>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f040 8093 	bne.w	8005a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01d      	beq.n	8005944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005908:	2208      	movs	r2, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d014      	beq.n	8005944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f023 0307 	bic.w	r3, r3, #7
 8005920:	3308      	adds	r3, #8
 8005922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <pvPortMalloc+0x6c>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	617b      	str	r3, [r7, #20]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d06e      	beq.n	8005a28 <pvPortMalloc+0x150>
 800594a:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <pvPortMalloc+0x188>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d869      	bhi.n	8005a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005954:	4b43      	ldr	r3, [pc, #268]	; (8005a64 <pvPortMalloc+0x18c>)
 8005956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005958:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <pvPortMalloc+0x18c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800595e:	e004      	b.n	800596a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <pvPortMalloc+0xa4>
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f1      	bne.n	8005960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <pvPortMalloc+0x180>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	429a      	cmp	r2, r3
 8005984:	d050      	beq.n	8005a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2208      	movs	r2, #8
 800598c:	4413      	add	r3, r2
 800598e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	2308      	movs	r3, #8
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d91f      	bls.n	80059e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <pvPortMalloc+0xf8>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	613b      	str	r3, [r7, #16]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	1ad2      	subs	r2, r2, r3
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059e2:	69b8      	ldr	r0, [r7, #24]
 80059e4:	f000 f908 	bl	8005bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <pvPortMalloc+0x188>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <pvPortMalloc+0x188>)
 80059f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <pvPortMalloc+0x188>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <pvPortMalloc+0x190>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d203      	bcs.n	8005a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <pvPortMalloc+0x188>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <pvPortMalloc+0x190>)
 8005a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <pvPortMalloc+0x184>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <pvPortMalloc+0x194>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <pvPortMalloc+0x194>)
 8005a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a28:	f7fe ff92 	bl	8004950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <pvPortMalloc+0x174>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	60fb      	str	r3, [r7, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <pvPortMalloc+0x172>
	return pvReturn;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3728      	adds	r7, #40	; 0x28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200040e4 	.word	0x200040e4
 8005a5c:	200040f8 	.word	0x200040f8
 8005a60:	200040e8 	.word	0x200040e8
 8005a64:	200040dc 	.word	0x200040dc
 8005a68:	200040ec 	.word	0x200040ec
 8005a6c:	200040f0 	.word	0x200040f0

08005a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04d      	beq.n	8005b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a82:	2308      	movs	r3, #8
 8005a84:	425b      	negs	r3, r3
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <vPortFree+0xb8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <vPortFree+0x44>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60fb      	str	r3, [r7, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <vPortFree+0x62>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60bb      	str	r3, [r7, #8]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vPortFree+0xb8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11a      	bne.n	8005b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <vPortFree+0xb8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	401a      	ands	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005af8:	f7fe ff1c 	bl	8004934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <vPortFree+0xbc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4413      	add	r3, r2
 8005b06:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <vPortFree+0xbc>)
 8005b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f000 f874 	bl	8005bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <vPortFree+0xc0>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	4a06      	ldr	r2, [pc, #24]	; (8005b30 <vPortFree+0xc0>)
 8005b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b1a:	f7fe ff19 	bl	8004950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200040f8 	.word	0x200040f8
 8005b2c:	200040e8 	.word	0x200040e8
 8005b30:	200040f4 	.word	0x200040f4

08005b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b40:	4b27      	ldr	r3, [pc, #156]	; (8005be0 <prvHeapInit+0xac>)
 8005b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3307      	adds	r3, #7
 8005b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0307 	bic.w	r3, r3, #7
 8005b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a1f      	ldr	r2, [pc, #124]	; (8005be0 <prvHeapInit+0xac>)
 8005b64:	4413      	add	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <prvHeapInit+0xb0>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b72:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <prvHeapInit+0xb0>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b80:	2208      	movs	r2, #8
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0307 	bic.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <prvHeapInit+0xb4>)
 8005b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <prvHeapInit+0xb4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <prvHeapInit+0xb4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <prvHeapInit+0xb4>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <prvHeapInit+0xb8>)
 8005bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <prvHeapInit+0xbc>)
 8005bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <prvHeapInit+0xc0>)
 8005bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	200004dc 	.word	0x200004dc
 8005be4:	200040dc 	.word	0x200040dc
 8005be8:	200040e4 	.word	0x200040e4
 8005bec:	200040ec 	.word	0x200040ec
 8005bf0:	200040e8 	.word	0x200040e8
 8005bf4:	200040f8 	.word	0x200040f8

08005bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c00:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <prvInsertBlockIntoFreeList+0xac>)
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e002      	b.n	8005c0c <prvInsertBlockIntoFreeList+0x14>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d8f7      	bhi.n	8005c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d108      	bne.n	8005c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	441a      	add	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d118      	bne.n	8005c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d00d      	beq.n	8005c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e008      	b.n	8005c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e003      	b.n	8005c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d002      	beq.n	8005c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	200040dc 	.word	0x200040dc
 8005ca8:	200040e4 	.word	0x200040e4

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000010 	.word	0x20000010

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 fc8e 	bl	80065ec <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	08006704 	.word	0x08006704
 8005cf4:	08006704 	.word	0x08006704
 8005cf8:	08006704 	.word	0x08006704
 8005cfc:	08006708 	.word	0x08006708

08005d00 <memcpy>:
 8005d00:	440a      	add	r2, r1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d08:	d100      	bne.n	8005d0c <memcpy+0xc>
 8005d0a:	4770      	bx	lr
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d16:	4291      	cmp	r1, r2
 8005d18:	d1f9      	bne.n	8005d0e <memcpy+0xe>
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <memset>:
 8005d1c:	4402      	add	r2, r0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <siprintf>:
 8005d2c:	b40e      	push	{r1, r2, r3}
 8005d2e:	b500      	push	{lr}
 8005d30:	b09c      	sub	sp, #112	; 0x70
 8005d32:	ab1d      	add	r3, sp, #116	; 0x74
 8005d34:	9002      	str	r0, [sp, #8]
 8005d36:	9006      	str	r0, [sp, #24]
 8005d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d3c:	4809      	ldr	r0, [pc, #36]	; (8005d64 <siprintf+0x38>)
 8005d3e:	9107      	str	r1, [sp, #28]
 8005d40:	9104      	str	r1, [sp, #16]
 8005d42:	4909      	ldr	r1, [pc, #36]	; (8005d68 <siprintf+0x3c>)
 8005d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d48:	9105      	str	r1, [sp, #20]
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	a902      	add	r1, sp, #8
 8005d50:	f000 f868 	bl	8005e24 <_svfiprintf_r>
 8005d54:	9b02      	ldr	r3, [sp, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	b01c      	add	sp, #112	; 0x70
 8005d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d60:	b003      	add	sp, #12
 8005d62:	4770      	bx	lr
 8005d64:	20000010 	.word	0x20000010
 8005d68:	ffff0208 	.word	0xffff0208

08005d6c <__ssputs_r>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	688e      	ldr	r6, [r1, #8]
 8005d72:	429e      	cmp	r6, r3
 8005d74:	4682      	mov	sl, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	4690      	mov	r8, r2
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	d838      	bhi.n	8005df0 <__ssputs_r+0x84>
 8005d7e:	898a      	ldrh	r2, [r1, #12]
 8005d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d84:	d032      	beq.n	8005dec <__ssputs_r+0x80>
 8005d86:	6825      	ldr	r5, [r4, #0]
 8005d88:	6909      	ldr	r1, [r1, #16]
 8005d8a:	eba5 0901 	sub.w	r9, r5, r1
 8005d8e:	6965      	ldr	r5, [r4, #20]
 8005d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d98:	3301      	adds	r3, #1
 8005d9a:	444b      	add	r3, r9
 8005d9c:	106d      	asrs	r5, r5, #1
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	bf38      	it	cc
 8005da2:	461d      	movcc	r5, r3
 8005da4:	0553      	lsls	r3, r2, #21
 8005da6:	d531      	bpl.n	8005e0c <__ssputs_r+0xa0>
 8005da8:	4629      	mov	r1, r5
 8005daa:	f000 fb55 	bl	8006458 <_malloc_r>
 8005dae:	4606      	mov	r6, r0
 8005db0:	b950      	cbnz	r0, 8005dc8 <__ssputs_r+0x5c>
 8005db2:	230c      	movs	r3, #12
 8005db4:	f8ca 3000 	str.w	r3, [sl]
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dbe:	81a3      	strh	r3, [r4, #12]
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	6921      	ldr	r1, [r4, #16]
 8005dca:	464a      	mov	r2, r9
 8005dcc:	f7ff ff98 	bl	8005d00 <memcpy>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	6126      	str	r6, [r4, #16]
 8005dde:	6165      	str	r5, [r4, #20]
 8005de0:	444e      	add	r6, r9
 8005de2:	eba5 0509 	sub.w	r5, r5, r9
 8005de6:	6026      	str	r6, [r4, #0]
 8005de8:	60a5      	str	r5, [r4, #8]
 8005dea:	463e      	mov	r6, r7
 8005dec:	42be      	cmp	r6, r7
 8005dee:	d900      	bls.n	8005df2 <__ssputs_r+0x86>
 8005df0:	463e      	mov	r6, r7
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	4632      	mov	r2, r6
 8005df6:	4641      	mov	r1, r8
 8005df8:	f000 faa8 	bl	800634c <memmove>
 8005dfc:	68a3      	ldr	r3, [r4, #8]
 8005dfe:	1b9b      	subs	r3, r3, r6
 8005e00:	60a3      	str	r3, [r4, #8]
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	4433      	add	r3, r6
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e7db      	b.n	8005dc4 <__ssputs_r+0x58>
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	f000 fb97 	bl	8006540 <_realloc_r>
 8005e12:	4606      	mov	r6, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1e1      	bne.n	8005ddc <__ssputs_r+0x70>
 8005e18:	6921      	ldr	r1, [r4, #16]
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	f000 fab0 	bl	8006380 <_free_r>
 8005e20:	e7c7      	b.n	8005db2 <__ssputs_r+0x46>
	...

08005e24 <_svfiprintf_r>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4698      	mov	r8, r3
 8005e2a:	898b      	ldrh	r3, [r1, #12]
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	b09d      	sub	sp, #116	; 0x74
 8005e30:	4607      	mov	r7, r0
 8005e32:	460d      	mov	r5, r1
 8005e34:	4614      	mov	r4, r2
 8005e36:	d50e      	bpl.n	8005e56 <_svfiprintf_r+0x32>
 8005e38:	690b      	ldr	r3, [r1, #16]
 8005e3a:	b963      	cbnz	r3, 8005e56 <_svfiprintf_r+0x32>
 8005e3c:	2140      	movs	r1, #64	; 0x40
 8005e3e:	f000 fb0b 	bl	8006458 <_malloc_r>
 8005e42:	6028      	str	r0, [r5, #0]
 8005e44:	6128      	str	r0, [r5, #16]
 8005e46:	b920      	cbnz	r0, 8005e52 <_svfiprintf_r+0x2e>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	e0d1      	b.n	8005ff6 <_svfiprintf_r+0x1d2>
 8005e52:	2340      	movs	r3, #64	; 0x40
 8005e54:	616b      	str	r3, [r5, #20]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e64:	2330      	movs	r3, #48	; 0x30
 8005e66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006010 <_svfiprintf_r+0x1ec>
 8005e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e6e:	f04f 0901 	mov.w	r9, #1
 8005e72:	4623      	mov	r3, r4
 8005e74:	469a      	mov	sl, r3
 8005e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e7a:	b10a      	cbz	r2, 8005e80 <_svfiprintf_r+0x5c>
 8005e7c:	2a25      	cmp	r2, #37	; 0x25
 8005e7e:	d1f9      	bne.n	8005e74 <_svfiprintf_r+0x50>
 8005e80:	ebba 0b04 	subs.w	fp, sl, r4
 8005e84:	d00b      	beq.n	8005e9e <_svfiprintf_r+0x7a>
 8005e86:	465b      	mov	r3, fp
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f7ff ff6d 	bl	8005d6c <__ssputs_r>
 8005e92:	3001      	adds	r0, #1
 8005e94:	f000 80aa 	beq.w	8005fec <_svfiprintf_r+0x1c8>
 8005e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e9a:	445a      	add	r2, fp
 8005e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 80a2 	beq.w	8005fec <_svfiprintf_r+0x1c8>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb2:	f10a 0a01 	add.w	sl, sl, #1
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec0:	4654      	mov	r4, sl
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec8:	4851      	ldr	r0, [pc, #324]	; (8006010 <_svfiprintf_r+0x1ec>)
 8005eca:	f7fa f989 	bl	80001e0 <memchr>
 8005ece:	9a04      	ldr	r2, [sp, #16]
 8005ed0:	b9d8      	cbnz	r0, 8005f0a <_svfiprintf_r+0xe6>
 8005ed2:	06d0      	lsls	r0, r2, #27
 8005ed4:	bf44      	itt	mi
 8005ed6:	2320      	movmi	r3, #32
 8005ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005edc:	0711      	lsls	r1, r2, #28
 8005ede:	bf44      	itt	mi
 8005ee0:	232b      	movmi	r3, #43	; 0x2b
 8005ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eea:	2b2a      	cmp	r3, #42	; 0x2a
 8005eec:	d015      	beq.n	8005f1a <_svfiprintf_r+0xf6>
 8005eee:	9a07      	ldr	r2, [sp, #28]
 8005ef0:	4654      	mov	r4, sl
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f04f 0c0a 	mov.w	ip, #10
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efe:	3b30      	subs	r3, #48	; 0x30
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d94e      	bls.n	8005fa2 <_svfiprintf_r+0x17e>
 8005f04:	b1b0      	cbz	r0, 8005f34 <_svfiprintf_r+0x110>
 8005f06:	9207      	str	r2, [sp, #28]
 8005f08:	e014      	b.n	8005f34 <_svfiprintf_r+0x110>
 8005f0a:	eba0 0308 	sub.w	r3, r0, r8
 8005f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	46a2      	mov	sl, r4
 8005f18:	e7d2      	b.n	8005ec0 <_svfiprintf_r+0x9c>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	1d19      	adds	r1, r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	9103      	str	r1, [sp, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfbb      	ittet	lt
 8005f26:	425b      	neglt	r3, r3
 8005f28:	f042 0202 	orrlt.w	r2, r2, #2
 8005f2c:	9307      	strge	r3, [sp, #28]
 8005f2e:	9307      	strlt	r3, [sp, #28]
 8005f30:	bfb8      	it	lt
 8005f32:	9204      	strlt	r2, [sp, #16]
 8005f34:	7823      	ldrb	r3, [r4, #0]
 8005f36:	2b2e      	cmp	r3, #46	; 0x2e
 8005f38:	d10c      	bne.n	8005f54 <_svfiprintf_r+0x130>
 8005f3a:	7863      	ldrb	r3, [r4, #1]
 8005f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3e:	d135      	bne.n	8005fac <_svfiprintf_r+0x188>
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9203      	str	r2, [sp, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfb8      	it	lt
 8005f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f50:	3402      	adds	r4, #2
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006020 <_svfiprintf_r+0x1fc>
 8005f58:	7821      	ldrb	r1, [r4, #0]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	f7fa f93f 	bl	80001e0 <memchr>
 8005f62:	b140      	cbz	r0, 8005f76 <_svfiprintf_r+0x152>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	eba0 000a 	sub.w	r0, r0, sl
 8005f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	4303      	orrs	r3, r0
 8005f72:	3401      	adds	r4, #1
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7a:	4826      	ldr	r0, [pc, #152]	; (8006014 <_svfiprintf_r+0x1f0>)
 8005f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f80:	2206      	movs	r2, #6
 8005f82:	f7fa f92d 	bl	80001e0 <memchr>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d038      	beq.n	8005ffc <_svfiprintf_r+0x1d8>
 8005f8a:	4b23      	ldr	r3, [pc, #140]	; (8006018 <_svfiprintf_r+0x1f4>)
 8005f8c:	bb1b      	cbnz	r3, 8005fd6 <_svfiprintf_r+0x1b2>
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	3307      	adds	r3, #7
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	3308      	adds	r3, #8
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	4433      	add	r3, r6
 8005f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa0:	e767      	b.n	8005e72 <_svfiprintf_r+0x4e>
 8005fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	2001      	movs	r0, #1
 8005faa:	e7a5      	b.n	8005ef8 <_svfiprintf_r+0xd4>
 8005fac:	2300      	movs	r3, #0
 8005fae:	3401      	adds	r4, #1
 8005fb0:	9305      	str	r3, [sp, #20]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f04f 0c0a 	mov.w	ip, #10
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fbe:	3a30      	subs	r2, #48	; 0x30
 8005fc0:	2a09      	cmp	r2, #9
 8005fc2:	d903      	bls.n	8005fcc <_svfiprintf_r+0x1a8>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0c5      	beq.n	8005f54 <_svfiprintf_r+0x130>
 8005fc8:	9105      	str	r1, [sp, #20]
 8005fca:	e7c3      	b.n	8005f54 <_svfiprintf_r+0x130>
 8005fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f0      	b.n	8005fb8 <_svfiprintf_r+0x194>
 8005fd6:	ab03      	add	r3, sp, #12
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	462a      	mov	r2, r5
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <_svfiprintf_r+0x1f8>)
 8005fde:	a904      	add	r1, sp, #16
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f3af 8000 	nop.w
 8005fe6:	1c42      	adds	r2, r0, #1
 8005fe8:	4606      	mov	r6, r0
 8005fea:	d1d6      	bne.n	8005f9a <_svfiprintf_r+0x176>
 8005fec:	89ab      	ldrh	r3, [r5, #12]
 8005fee:	065b      	lsls	r3, r3, #25
 8005ff0:	f53f af2c 	bmi.w	8005e4c <_svfiprintf_r+0x28>
 8005ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff6:	b01d      	add	sp, #116	; 0x74
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	ab03      	add	r3, sp, #12
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	462a      	mov	r2, r5
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <_svfiprintf_r+0x1f8>)
 8006004:	a904      	add	r1, sp, #16
 8006006:	4638      	mov	r0, r7
 8006008:	f000 f87a 	bl	8006100 <_printf_i>
 800600c:	e7eb      	b.n	8005fe6 <_svfiprintf_r+0x1c2>
 800600e:	bf00      	nop
 8006010:	080066c8 	.word	0x080066c8
 8006014:	080066d2 	.word	0x080066d2
 8006018:	00000000 	.word	0x00000000
 800601c:	08005d6d 	.word	0x08005d6d
 8006020:	080066ce 	.word	0x080066ce

08006024 <_printf_common>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	4616      	mov	r6, r2
 800602a:	4699      	mov	r9, r3
 800602c:	688a      	ldr	r2, [r1, #8]
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006034:	4293      	cmp	r3, r2
 8006036:	bfb8      	it	lt
 8006038:	4613      	movlt	r3, r2
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006040:	4607      	mov	r7, r0
 8006042:	460c      	mov	r4, r1
 8006044:	b10a      	cbz	r2, 800604a <_printf_common+0x26>
 8006046:	3301      	adds	r3, #1
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	0699      	lsls	r1, r3, #26
 800604e:	bf42      	ittt	mi
 8006050:	6833      	ldrmi	r3, [r6, #0]
 8006052:	3302      	addmi	r3, #2
 8006054:	6033      	strmi	r3, [r6, #0]
 8006056:	6825      	ldr	r5, [r4, #0]
 8006058:	f015 0506 	ands.w	r5, r5, #6
 800605c:	d106      	bne.n	800606c <_printf_common+0x48>
 800605e:	f104 0a19 	add.w	sl, r4, #25
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	42ab      	cmp	r3, r5
 800606a:	dc26      	bgt.n	80060ba <_printf_common+0x96>
 800606c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006070:	1e13      	subs	r3, r2, #0
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	bf18      	it	ne
 8006076:	2301      	movne	r3, #1
 8006078:	0692      	lsls	r2, r2, #26
 800607a:	d42b      	bmi.n	80060d4 <_printf_common+0xb0>
 800607c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006080:	4649      	mov	r1, r9
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	3001      	adds	r0, #1
 8006088:	d01e      	beq.n	80060c8 <_printf_common+0xa4>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	68e5      	ldr	r5, [r4, #12]
 800608e:	6832      	ldr	r2, [r6, #0]
 8006090:	f003 0306 	and.w	r3, r3, #6
 8006094:	2b04      	cmp	r3, #4
 8006096:	bf08      	it	eq
 8006098:	1aad      	subeq	r5, r5, r2
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	bf0c      	ite	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	2500      	movne	r5, #0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bfc4      	itt	gt
 80060aa:	1a9b      	subgt	r3, r3, r2
 80060ac:	18ed      	addgt	r5, r5, r3
 80060ae:	2600      	movs	r6, #0
 80060b0:	341a      	adds	r4, #26
 80060b2:	42b5      	cmp	r5, r6
 80060b4:	d11a      	bne.n	80060ec <_printf_common+0xc8>
 80060b6:	2000      	movs	r0, #0
 80060b8:	e008      	b.n	80060cc <_printf_common+0xa8>
 80060ba:	2301      	movs	r3, #1
 80060bc:	4652      	mov	r2, sl
 80060be:	4649      	mov	r1, r9
 80060c0:	4638      	mov	r0, r7
 80060c2:	47c0      	blx	r8
 80060c4:	3001      	adds	r0, #1
 80060c6:	d103      	bne.n	80060d0 <_printf_common+0xac>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d0:	3501      	adds	r5, #1
 80060d2:	e7c6      	b.n	8006062 <_printf_common+0x3e>
 80060d4:	18e1      	adds	r1, r4, r3
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	2030      	movs	r0, #48	; 0x30
 80060da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060de:	4422      	add	r2, r4
 80060e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e8:	3302      	adds	r3, #2
 80060ea:	e7c7      	b.n	800607c <_printf_common+0x58>
 80060ec:	2301      	movs	r3, #1
 80060ee:	4622      	mov	r2, r4
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d0e6      	beq.n	80060c8 <_printf_common+0xa4>
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7d9      	b.n	80060b2 <_printf_common+0x8e>
	...

08006100 <_printf_i>:
 8006100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	7e0f      	ldrb	r7, [r1, #24]
 8006106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006108:	2f78      	cmp	r7, #120	; 0x78
 800610a:	4691      	mov	r9, r2
 800610c:	4680      	mov	r8, r0
 800610e:	460c      	mov	r4, r1
 8006110:	469a      	mov	sl, r3
 8006112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006116:	d807      	bhi.n	8006128 <_printf_i+0x28>
 8006118:	2f62      	cmp	r7, #98	; 0x62
 800611a:	d80a      	bhi.n	8006132 <_printf_i+0x32>
 800611c:	2f00      	cmp	r7, #0
 800611e:	f000 80d8 	beq.w	80062d2 <_printf_i+0x1d2>
 8006122:	2f58      	cmp	r7, #88	; 0x58
 8006124:	f000 80a3 	beq.w	800626e <_printf_i+0x16e>
 8006128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800612c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006130:	e03a      	b.n	80061a8 <_printf_i+0xa8>
 8006132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006136:	2b15      	cmp	r3, #21
 8006138:	d8f6      	bhi.n	8006128 <_printf_i+0x28>
 800613a:	a101      	add	r1, pc, #4	; (adr r1, 8006140 <_printf_i+0x40>)
 800613c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006140:	08006199 	.word	0x08006199
 8006144:	080061ad 	.word	0x080061ad
 8006148:	08006129 	.word	0x08006129
 800614c:	08006129 	.word	0x08006129
 8006150:	08006129 	.word	0x08006129
 8006154:	08006129 	.word	0x08006129
 8006158:	080061ad 	.word	0x080061ad
 800615c:	08006129 	.word	0x08006129
 8006160:	08006129 	.word	0x08006129
 8006164:	08006129 	.word	0x08006129
 8006168:	08006129 	.word	0x08006129
 800616c:	080062b9 	.word	0x080062b9
 8006170:	080061dd 	.word	0x080061dd
 8006174:	0800629b 	.word	0x0800629b
 8006178:	08006129 	.word	0x08006129
 800617c:	08006129 	.word	0x08006129
 8006180:	080062db 	.word	0x080062db
 8006184:	08006129 	.word	0x08006129
 8006188:	080061dd 	.word	0x080061dd
 800618c:	08006129 	.word	0x08006129
 8006190:	08006129 	.word	0x08006129
 8006194:	080062a3 	.word	0x080062a3
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a3      	b.n	80062f4 <_printf_i+0x1f4>
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	6829      	ldr	r1, [r5, #0]
 80061b0:	0606      	lsls	r6, r0, #24
 80061b2:	f101 0304 	add.w	r3, r1, #4
 80061b6:	d50a      	bpl.n	80061ce <_printf_i+0xce>
 80061b8:	680e      	ldr	r6, [r1, #0]
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	2e00      	cmp	r6, #0
 80061be:	da03      	bge.n	80061c8 <_printf_i+0xc8>
 80061c0:	232d      	movs	r3, #45	; 0x2d
 80061c2:	4276      	negs	r6, r6
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c8:	485e      	ldr	r0, [pc, #376]	; (8006344 <_printf_i+0x244>)
 80061ca:	230a      	movs	r3, #10
 80061cc:	e019      	b.n	8006202 <_printf_i+0x102>
 80061ce:	680e      	ldr	r6, [r1, #0]
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061d6:	bf18      	it	ne
 80061d8:	b236      	sxthne	r6, r6
 80061da:	e7ef      	b.n	80061bc <_printf_i+0xbc>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1d19      	adds	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	0601      	lsls	r1, r0, #24
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0xec>
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0xf2>
 80061ec:	0646      	lsls	r6, r0, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0xe8>
 80061f0:	881e      	ldrh	r6, [r3, #0]
 80061f2:	4854      	ldr	r0, [pc, #336]	; (8006344 <_printf_i+0x244>)
 80061f4:	2f6f      	cmp	r7, #111	; 0x6f
 80061f6:	bf0c      	ite	eq
 80061f8:	2308      	moveq	r3, #8
 80061fa:	230a      	movne	r3, #10
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	2d00      	cmp	r5, #0
 8006208:	bfa2      	ittt	ge
 800620a:	6821      	ldrge	r1, [r4, #0]
 800620c:	f021 0104 	bicge.w	r1, r1, #4
 8006210:	6021      	strge	r1, [r4, #0]
 8006212:	b90e      	cbnz	r6, 8006218 <_printf_i+0x118>
 8006214:	2d00      	cmp	r5, #0
 8006216:	d04d      	beq.n	80062b4 <_printf_i+0x1b4>
 8006218:	4615      	mov	r5, r2
 800621a:	fbb6 f1f3 	udiv	r1, r6, r3
 800621e:	fb03 6711 	mls	r7, r3, r1, r6
 8006222:	5dc7      	ldrb	r7, [r0, r7]
 8006224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006228:	4637      	mov	r7, r6
 800622a:	42bb      	cmp	r3, r7
 800622c:	460e      	mov	r6, r1
 800622e:	d9f4      	bls.n	800621a <_printf_i+0x11a>
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10b      	bne.n	800624c <_printf_i+0x14c>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07de      	lsls	r6, r3, #31
 8006238:	d508      	bpl.n	800624c <_printf_i+0x14c>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4299      	cmp	r1, r3
 8006240:	bfde      	ittt	le
 8006242:	2330      	movle	r3, #48	; 0x30
 8006244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	6122      	str	r2, [r4, #16]
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	464b      	mov	r3, r9
 8006256:	aa03      	add	r2, sp, #12
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fee2 	bl	8006024 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	d14c      	bne.n	80062fe <_printf_i+0x1fe>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626e:	4835      	ldr	r0, [pc, #212]	; (8006344 <_printf_i+0x244>)
 8006270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006274:	6829      	ldr	r1, [r5, #0]
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f851 6b04 	ldr.w	r6, [r1], #4
 800627c:	6029      	str	r1, [r5, #0]
 800627e:	061d      	lsls	r5, r3, #24
 8006280:	d514      	bpl.n	80062ac <_printf_i+0x1ac>
 8006282:	07df      	lsls	r7, r3, #31
 8006284:	bf44      	itt	mi
 8006286:	f043 0320 	orrmi.w	r3, r3, #32
 800628a:	6023      	strmi	r3, [r4, #0]
 800628c:	b91e      	cbnz	r6, 8006296 <_printf_i+0x196>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	f023 0320 	bic.w	r3, r3, #32
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	2310      	movs	r3, #16
 8006298:	e7b0      	b.n	80061fc <_printf_i+0xfc>
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	f043 0320 	orr.w	r3, r3, #32
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	2378      	movs	r3, #120	; 0x78
 80062a4:	4828      	ldr	r0, [pc, #160]	; (8006348 <_printf_i+0x248>)
 80062a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062aa:	e7e3      	b.n	8006274 <_printf_i+0x174>
 80062ac:	0659      	lsls	r1, r3, #25
 80062ae:	bf48      	it	mi
 80062b0:	b2b6      	uxthmi	r6, r6
 80062b2:	e7e6      	b.n	8006282 <_printf_i+0x182>
 80062b4:	4615      	mov	r5, r2
 80062b6:	e7bb      	b.n	8006230 <_printf_i+0x130>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6826      	ldr	r6, [r4, #0]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	1d18      	adds	r0, r3, #4
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	0635      	lsls	r5, r6, #24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0x1cc>
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0x1d2>
 80062cc:	0670      	lsls	r0, r6, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0x1c8>
 80062d0:	8019      	strh	r1, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	4615      	mov	r5, r2
 80062d8:	e7ba      	b.n	8006250 <_printf_i+0x150>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7f9 ff7a 	bl	80001e0 <memchr>
 80062ec:	b108      	cbz	r0, 80062f2 <_printf_i+0x1f2>
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e7a8      	b.n	8006250 <_printf_i+0x150>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	47d0      	blx	sl
 8006308:	3001      	adds	r0, #1
 800630a:	d0ab      	beq.n	8006264 <_printf_i+0x164>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d413      	bmi.n	800633a <_printf_i+0x23a>
 8006312:	68e0      	ldr	r0, [r4, #12]
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	4298      	cmp	r0, r3
 8006318:	bfb8      	it	lt
 800631a:	4618      	movlt	r0, r3
 800631c:	e7a4      	b.n	8006268 <_printf_i+0x168>
 800631e:	2301      	movs	r3, #1
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d09b      	beq.n	8006264 <_printf_i+0x164>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf2      	bgt.n	800631e <_printf_i+0x21e>
 8006338:	e7eb      	b.n	8006312 <_printf_i+0x212>
 800633a:	2500      	movs	r5, #0
 800633c:	f104 0619 	add.w	r6, r4, #25
 8006340:	e7f5      	b.n	800632e <_printf_i+0x22e>
 8006342:	bf00      	nop
 8006344:	080066d9 	.word	0x080066d9
 8006348:	080066ea 	.word	0x080066ea

0800634c <memmove>:
 800634c:	4288      	cmp	r0, r1
 800634e:	b510      	push	{r4, lr}
 8006350:	eb01 0402 	add.w	r4, r1, r2
 8006354:	d902      	bls.n	800635c <memmove+0x10>
 8006356:	4284      	cmp	r4, r0
 8006358:	4623      	mov	r3, r4
 800635a:	d807      	bhi.n	800636c <memmove+0x20>
 800635c:	1e43      	subs	r3, r0, #1
 800635e:	42a1      	cmp	r1, r4
 8006360:	d008      	beq.n	8006374 <memmove+0x28>
 8006362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636a:	e7f8      	b.n	800635e <memmove+0x12>
 800636c:	4402      	add	r2, r0
 800636e:	4601      	mov	r1, r0
 8006370:	428a      	cmp	r2, r1
 8006372:	d100      	bne.n	8006376 <memmove+0x2a>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637e:	e7f7      	b.n	8006370 <memmove+0x24>

08006380 <_free_r>:
 8006380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006382:	2900      	cmp	r1, #0
 8006384:	d044      	beq.n	8006410 <_free_r+0x90>
 8006386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800638a:	9001      	str	r0, [sp, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f1a1 0404 	sub.w	r4, r1, #4
 8006392:	bfb8      	it	lt
 8006394:	18e4      	addlt	r4, r4, r3
 8006396:	f000 f913 	bl	80065c0 <__malloc_lock>
 800639a:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <_free_r+0x94>)
 800639c:	9801      	ldr	r0, [sp, #4]
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	b933      	cbnz	r3, 80063b0 <_free_r+0x30>
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	6014      	str	r4, [r2, #0]
 80063a6:	b003      	add	sp, #12
 80063a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ac:	f000 b90e 	b.w	80065cc <__malloc_unlock>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d908      	bls.n	80063c6 <_free_r+0x46>
 80063b4:	6825      	ldr	r5, [r4, #0]
 80063b6:	1961      	adds	r1, r4, r5
 80063b8:	428b      	cmp	r3, r1
 80063ba:	bf01      	itttt	eq
 80063bc:	6819      	ldreq	r1, [r3, #0]
 80063be:	685b      	ldreq	r3, [r3, #4]
 80063c0:	1949      	addeq	r1, r1, r5
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	e7ed      	b.n	80063a2 <_free_r+0x22>
 80063c6:	461a      	mov	r2, r3
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b10b      	cbz	r3, 80063d0 <_free_r+0x50>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d9fa      	bls.n	80063c6 <_free_r+0x46>
 80063d0:	6811      	ldr	r1, [r2, #0]
 80063d2:	1855      	adds	r5, r2, r1
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d10b      	bne.n	80063f0 <_free_r+0x70>
 80063d8:	6824      	ldr	r4, [r4, #0]
 80063da:	4421      	add	r1, r4
 80063dc:	1854      	adds	r4, r2, r1
 80063de:	42a3      	cmp	r3, r4
 80063e0:	6011      	str	r1, [r2, #0]
 80063e2:	d1e0      	bne.n	80063a6 <_free_r+0x26>
 80063e4:	681c      	ldr	r4, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	4421      	add	r1, r4
 80063ec:	6011      	str	r1, [r2, #0]
 80063ee:	e7da      	b.n	80063a6 <_free_r+0x26>
 80063f0:	d902      	bls.n	80063f8 <_free_r+0x78>
 80063f2:	230c      	movs	r3, #12
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	e7d6      	b.n	80063a6 <_free_r+0x26>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf04      	itt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	bf04      	itt	eq
 8006408:	1949      	addeq	r1, r1, r5
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	6054      	str	r4, [r2, #4]
 800640e:	e7ca      	b.n	80063a6 <_free_r+0x26>
 8006410:	b003      	add	sp, #12
 8006412:	bd30      	pop	{r4, r5, pc}
 8006414:	200040fc 	.word	0x200040fc

08006418 <sbrk_aligned>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4e0e      	ldr	r6, [pc, #56]	; (8006454 <sbrk_aligned+0x3c>)
 800641c:	460c      	mov	r4, r1
 800641e:	6831      	ldr	r1, [r6, #0]
 8006420:	4605      	mov	r5, r0
 8006422:	b911      	cbnz	r1, 800642a <sbrk_aligned+0x12>
 8006424:	f000 f8bc 	bl	80065a0 <_sbrk_r>
 8006428:	6030      	str	r0, [r6, #0]
 800642a:	4621      	mov	r1, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f000 f8b7 	bl	80065a0 <_sbrk_r>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	d00a      	beq.n	800644c <sbrk_aligned+0x34>
 8006436:	1cc4      	adds	r4, r0, #3
 8006438:	f024 0403 	bic.w	r4, r4, #3
 800643c:	42a0      	cmp	r0, r4
 800643e:	d007      	beq.n	8006450 <sbrk_aligned+0x38>
 8006440:	1a21      	subs	r1, r4, r0
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f8ac 	bl	80065a0 <_sbrk_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d101      	bne.n	8006450 <sbrk_aligned+0x38>
 800644c:	f04f 34ff 	mov.w	r4, #4294967295
 8006450:	4620      	mov	r0, r4
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	20004100 	.word	0x20004100

08006458 <_malloc_r>:
 8006458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645c:	1ccd      	adds	r5, r1, #3
 800645e:	f025 0503 	bic.w	r5, r5, #3
 8006462:	3508      	adds	r5, #8
 8006464:	2d0c      	cmp	r5, #12
 8006466:	bf38      	it	cc
 8006468:	250c      	movcc	r5, #12
 800646a:	2d00      	cmp	r5, #0
 800646c:	4607      	mov	r7, r0
 800646e:	db01      	blt.n	8006474 <_malloc_r+0x1c>
 8006470:	42a9      	cmp	r1, r5
 8006472:	d905      	bls.n	8006480 <_malloc_r+0x28>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	2600      	movs	r6, #0
 800647a:	4630      	mov	r0, r6
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006480:	4e2e      	ldr	r6, [pc, #184]	; (800653c <_malloc_r+0xe4>)
 8006482:	f000 f89d 	bl	80065c0 <__malloc_lock>
 8006486:	6833      	ldr	r3, [r6, #0]
 8006488:	461c      	mov	r4, r3
 800648a:	bb34      	cbnz	r4, 80064da <_malloc_r+0x82>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	f7ff ffc2 	bl	8006418 <sbrk_aligned>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	4604      	mov	r4, r0
 8006498:	d14d      	bne.n	8006536 <_malloc_r+0xde>
 800649a:	6834      	ldr	r4, [r6, #0]
 800649c:	4626      	mov	r6, r4
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d140      	bne.n	8006524 <_malloc_r+0xcc>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	4631      	mov	r1, r6
 80064a6:	4638      	mov	r0, r7
 80064a8:	eb04 0803 	add.w	r8, r4, r3
 80064ac:	f000 f878 	bl	80065a0 <_sbrk_r>
 80064b0:	4580      	cmp	r8, r0
 80064b2:	d13a      	bne.n	800652a <_malloc_r+0xd2>
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	3503      	adds	r5, #3
 80064b8:	1a6d      	subs	r5, r5, r1
 80064ba:	f025 0503 	bic.w	r5, r5, #3
 80064be:	3508      	adds	r5, #8
 80064c0:	2d0c      	cmp	r5, #12
 80064c2:	bf38      	it	cc
 80064c4:	250c      	movcc	r5, #12
 80064c6:	4629      	mov	r1, r5
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ffa5 	bl	8006418 <sbrk_aligned>
 80064ce:	3001      	adds	r0, #1
 80064d0:	d02b      	beq.n	800652a <_malloc_r+0xd2>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	442b      	add	r3, r5
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	e00e      	b.n	80064f8 <_malloc_r+0xa0>
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	1b52      	subs	r2, r2, r5
 80064de:	d41e      	bmi.n	800651e <_malloc_r+0xc6>
 80064e0:	2a0b      	cmp	r2, #11
 80064e2:	d916      	bls.n	8006512 <_malloc_r+0xba>
 80064e4:	1961      	adds	r1, r4, r5
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	6025      	str	r5, [r4, #0]
 80064ea:	bf18      	it	ne
 80064ec:	6059      	strne	r1, [r3, #4]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	bf08      	it	eq
 80064f2:	6031      	streq	r1, [r6, #0]
 80064f4:	5162      	str	r2, [r4, r5]
 80064f6:	604b      	str	r3, [r1, #4]
 80064f8:	4638      	mov	r0, r7
 80064fa:	f104 060b 	add.w	r6, r4, #11
 80064fe:	f000 f865 	bl	80065cc <__malloc_unlock>
 8006502:	f026 0607 	bic.w	r6, r6, #7
 8006506:	1d23      	adds	r3, r4, #4
 8006508:	1af2      	subs	r2, r6, r3
 800650a:	d0b6      	beq.n	800647a <_malloc_r+0x22>
 800650c:	1b9b      	subs	r3, r3, r6
 800650e:	50a3      	str	r3, [r4, r2]
 8006510:	e7b3      	b.n	800647a <_malloc_r+0x22>
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	42a3      	cmp	r3, r4
 8006516:	bf0c      	ite	eq
 8006518:	6032      	streq	r2, [r6, #0]
 800651a:	605a      	strne	r2, [r3, #4]
 800651c:	e7ec      	b.n	80064f8 <_malloc_r+0xa0>
 800651e:	4623      	mov	r3, r4
 8006520:	6864      	ldr	r4, [r4, #4]
 8006522:	e7b2      	b.n	800648a <_malloc_r+0x32>
 8006524:	4634      	mov	r4, r6
 8006526:	6876      	ldr	r6, [r6, #4]
 8006528:	e7b9      	b.n	800649e <_malloc_r+0x46>
 800652a:	230c      	movs	r3, #12
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	4638      	mov	r0, r7
 8006530:	f000 f84c 	bl	80065cc <__malloc_unlock>
 8006534:	e7a1      	b.n	800647a <_malloc_r+0x22>
 8006536:	6025      	str	r5, [r4, #0]
 8006538:	e7de      	b.n	80064f8 <_malloc_r+0xa0>
 800653a:	bf00      	nop
 800653c:	200040fc 	.word	0x200040fc

08006540 <_realloc_r>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	4680      	mov	r8, r0
 8006546:	4614      	mov	r4, r2
 8006548:	460e      	mov	r6, r1
 800654a:	b921      	cbnz	r1, 8006556 <_realloc_r+0x16>
 800654c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006550:	4611      	mov	r1, r2
 8006552:	f7ff bf81 	b.w	8006458 <_malloc_r>
 8006556:	b92a      	cbnz	r2, 8006564 <_realloc_r+0x24>
 8006558:	f7ff ff12 	bl	8006380 <_free_r>
 800655c:	4625      	mov	r5, r4
 800655e:	4628      	mov	r0, r5
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006564:	f000 f838 	bl	80065d8 <_malloc_usable_size_r>
 8006568:	4284      	cmp	r4, r0
 800656a:	4607      	mov	r7, r0
 800656c:	d802      	bhi.n	8006574 <_realloc_r+0x34>
 800656e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006572:	d812      	bhi.n	800659a <_realloc_r+0x5a>
 8006574:	4621      	mov	r1, r4
 8006576:	4640      	mov	r0, r8
 8006578:	f7ff ff6e 	bl	8006458 <_malloc_r>
 800657c:	4605      	mov	r5, r0
 800657e:	2800      	cmp	r0, #0
 8006580:	d0ed      	beq.n	800655e <_realloc_r+0x1e>
 8006582:	42bc      	cmp	r4, r7
 8006584:	4622      	mov	r2, r4
 8006586:	4631      	mov	r1, r6
 8006588:	bf28      	it	cs
 800658a:	463a      	movcs	r2, r7
 800658c:	f7ff fbb8 	bl	8005d00 <memcpy>
 8006590:	4631      	mov	r1, r6
 8006592:	4640      	mov	r0, r8
 8006594:	f7ff fef4 	bl	8006380 <_free_r>
 8006598:	e7e1      	b.n	800655e <_realloc_r+0x1e>
 800659a:	4635      	mov	r5, r6
 800659c:	e7df      	b.n	800655e <_realloc_r+0x1e>
	...

080065a0 <_sbrk_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_sbrk_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fb f876 	bl	800169c <_sbrk>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_sbrk_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_sbrk_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20004104 	.word	0x20004104

080065c0 <__malloc_lock>:
 80065c0:	4801      	ldr	r0, [pc, #4]	; (80065c8 <__malloc_lock+0x8>)
 80065c2:	f000 b811 	b.w	80065e8 <__retarget_lock_acquire_recursive>
 80065c6:	bf00      	nop
 80065c8:	20004108 	.word	0x20004108

080065cc <__malloc_unlock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__malloc_unlock+0x8>)
 80065ce:	f000 b80c 	b.w	80065ea <__retarget_lock_release_recursive>
 80065d2:	bf00      	nop
 80065d4:	20004108 	.word	0x20004108

080065d8 <_malloc_usable_size_r>:
 80065d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065dc:	1f18      	subs	r0, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bfbc      	itt	lt
 80065e2:	580b      	ldrlt	r3, [r1, r0]
 80065e4:	18c0      	addlt	r0, r0, r3
 80065e6:	4770      	bx	lr

080065e8 <__retarget_lock_acquire_recursive>:
 80065e8:	4770      	bx	lr

080065ea <__retarget_lock_release_recursive>:
 80065ea:	4770      	bx	lr

080065ec <_init>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr

080065f8 <_fini>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr
